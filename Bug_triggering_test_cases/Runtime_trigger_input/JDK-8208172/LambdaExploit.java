
import org.objectweb.asm.*;

import java.nio.file.Files;
import java.nio.file.Paths;

import static java.nio.file.StandardOpenOption.CREATE;
import static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;
import static org.objectweb.asm.Opcodes.*;

public class LambdaExploit {

    public static void main(String[] args) throws Exception {
        new LambdaExploit().generate();
    }

    private byte[] generate() throws Exception {
        ClassWriter classWriter = new ClassWriter(0);
        MethodVisitor methodVisitor;
        classWriter.visit(V10, ACC_PUBLIC | ACC_FINAL | ACC_SUPER, "romromov/Lambda", null, "java/lang/Object", null);
        classWriter.visitSource("Lambda.java", null);
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "test", "()V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInvokeDynamicInsn(
                    "run"
                    , "()Ljava/lang/Runnable;"
                    , new Handle(Opcodes.H_INVOKESTATIC
                            , "romromov/LambdaMetafactory"
                            , "metafactory"
                            , "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;", false)
                    , new Object[]{
                            Type.getType("()V")
                            , new Handle(Opcodes.H_INVOKESTATIC
                            , "romromov/Lambda"
                            , "lambda$test$0"
                            , "()V"
                            , false)
                            , Type.getType("()V")});
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(1, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PRIVATE | ACC_STATIC | ACC_SYNTHETIC, "lambda$test$0", "()V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(0, 0);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitTypeInsn(NEW, "romromov/Lambda");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "romromov/Lambda", "<init>", "()V", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "romromov/Lambda", "test", "()V", false);
            methodVisitor.visitInsn(RETURN);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitMaxs(2, 1);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();
        final byte[] bytecodes = classWriter.toByteArray();
        final var path = Paths.get("/home/rom/Code/sigfault/romromov/Lambda.class");
        Files.write(path, bytecodes, CREATE, TRUNCATE_EXISTING);
        return bytecodes;
    }
}





