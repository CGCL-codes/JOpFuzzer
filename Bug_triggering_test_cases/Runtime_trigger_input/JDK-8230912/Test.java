// Generated by Java* Fuzzer test generator (1.0.001). Thu Sep 12 03:31:51 2019
// srand = 199549414590221675077652719325722215860

public inline class Test {

    public static final int N = 400;

    public static long instanceCount=8486418569846315239L;
    public double dFld1=-83.3199;
    public boolean bFld1=false;
    public short sFld2=11319;
    public int iArrFld1[]=new int[N];
    public Test setinstanceCount(long value) { Test.instanceCount = value; return this; };
    public Test setdFld1(double value) { return __WithField(dFld1, value); };
    public Test setbFld1(boolean value) { return __WithField(bFld1, value); };
    public Test setsFld2(short value) { return __WithField(sFld2, value); };
    public Test setiArrFld1(int value[]) { return __WithField(iArrFld1, value); };

    public void mainTest(String[] strArr1) {

        int i16=223, i17=6206, i18=23341, i19=-11, i20=11, i21=-88;
        float f=-50.656F;

        FuzzerUtils.init(Cls3.OFld2.fArrFld, 38.909F);
        FuzzerUtils.init(Cls3.OFld2.lArrFld2, 160L);

        Cls1.OFld1 = Cls1.OFld1.setiFld3((int)(Cls1.OFld1.iFld3+(int)(-13979L))); /* Cls1.OFld1.iFld3 += (int)-13979L
            */ ;
        for (i16 = 6; 130 > i16; ++i16) {
            setdFld1((double)(dFld1-(double)(-11))); /* dFld1 -= -11 */ ;
            for (i18 = 9; i18 < 202; ++i18) {
                f = 1;
                while (++f < 2) {
                    i19 += (int)Cls.fFld;
                    Cls.fFld += -12;
                    i17 += (int)(0.492F + (f * f));
                    i19 -= -23640;
                    i17 = i16;
                }
                for (i20 = i18; 2 > i20; ++i20) {
                    switch (((Cls3.OFld2.iFld4 >>> 1) % 5) + 50) {
                    case 50:
                        switch (((i18 >>> 1) % 1) + 43) {
                        case 43:
                            iArrFld1[i16 + 1] = 155;
                            if (bFld1) continue;
                            Cls1.OFld1 = Cls1.OFld1.setiFld3((int)(Cls1.OFld1.iFld3+(int)((i20 | i19)))); /*
                                Cls1.OFld1.iFld3 += (i20 | i19) */ ;
                            i21 += (-9 + (i20 * i20));
                            break;
                        }
                        iArrFld1[i18 + 1] <<= i16;
                        Cls3.instanceCount += sFld2;
                        Cls1.OFld1 = Cls1.OFld1.setiFld3((int)((int)dFld1)); /* Cls1.OFld1.iFld3 = (int)dFld1 */ ;
                    case 51:
                        Cls3.OFld2.fArrFld[i20][i16 - 1] *= i16;
                        i21 -= i17;
                        break;
                    case 52:
                        Cls1.OFld1 = Cls1.OFld1.setiFld3((int)(Cls1.OFld1.iFld3+(int)((i20 + Cls3.instanceCount)))); /*
                            Cls1.OFld1.iFld3 += (i20 + Cls3.instanceCount) */ ;
                        if (bFld1) continue;
                        iArrFld1[i18 - 1] = (int)dFld1;
                        break;
                    case 53:
                        setdFld1((double)(dFld1*(double)(i17))); /* dFld1 *= i17 */ ;
                        Cls4.instanceCount += (i20 * i20);
                        break;
                    case 54:
                        Cls3.OFld2 = Cls3.OFld2.setiFld4((int)(Cls3.OFld2.iFld4*(int)(230))); /* Cls3.OFld2.iFld4 *=
                            230 */ ;
                        setiArrFld1(iArrFld1); /* iArrFld1 = iArrFld1 */ ;
                        Cls3.OFld2.lArrFld2[i18 - 1] = (long)dFld1;
                        break;
                    }
                }
            }
        }

        FuzzerUtils.out.println("Cls1.OFld1.iFld3 i16 i17 = " + Cls1.OFld1.iFld3 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 f = " + i18 + "," + i19 + "," + Float.floatToIntBits(f));
        FuzzerUtils.out.println("i20 i21 Cls3.OFld2.iFld4 = " + i20 + "," + i21 + "," + Cls3.OFld2.iFld4);
        FuzzerUtils.out.println("Cls3.OFld2.fArrFld Cls3.OFld2.lArrFld2 Cls = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Cls3.OFld2.fArrFld)) + "," +
            FuzzerUtils.checkSum(Cls3.OFld2.lArrFld2) + "," + Cls.instanceCount);
        FuzzerUtils.out.println("Cls1 Cls2 Cls3 = " + Cls1.instanceCount + "," + Cls2.instanceCount + "," +
            Cls3.instanceCount);
        FuzzerUtils.out.println("Cls4 = " + Cls4.instanceCount);

        FuzzerUtils.out.println("Test.instanceCount dFld1 bFld1 = " + Test.instanceCount + "," +
            Double.doubleToLongBits(dFld1) + "," + (bFld1 ? 1 : 0));
        FuzzerUtils.out.println("sFld2 iArrFld1 Cls = " + sFld2 + "," + FuzzerUtils.checkSum(iArrFld1) + "," +
            Cls.instanceCount);
        FuzzerUtils.out.println("Cls1 Cls2 Cls3 = " + Cls1.instanceCount + "," + Cls2.instanceCount + "," +
            Cls3.instanceCount);
        FuzzerUtils.out.println("Cls4 = " + Cls4.instanceCount);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
inline class Cls {

    public static final int N = 400;

    public static long instanceCount=-6883522639586420404L;
    public double dFld=25.69471;
    public static float fFld=-99.880F;
    public byte byFld=-72;
    public int iFld3=30;
    public long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];
    public Cls4 OFld3=new Cls4();
    public Cls setinstanceCount(long value) { Cls.instanceCount = value; return this; };
    public Cls setdFld(double value) { return __WithField(dFld, value); };
    public Cls setfFld(float value) { Cls.fFld = value; return this; };
    public Cls setbyFld(byte value) { return __WithField(byFld, value); };
    public Cls setiFld3(int value) { return __WithField(iFld3, value); };
    public Cls setlArrFld(long value[]) { return __WithField(lArrFld, value); };
    public Cls setiArrFld(int value[]) { return __WithField(iArrFld, value); };
    public Cls setOFld3(Cls4 value) { return __WithField(OFld3, value); };

    public static long Cls_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i4=12555, i5=202, i6=-13, i7=-52, iArr[][]=new int[N][N];
        double d=-2.36766;
        Cls1 O=new Cls1();

        FuzzerUtils.init(iArr, -27942);
        FuzzerUtils.init(O.OFld.lArrFld, 178L);

        O = O.setiFld1((int)(O.iFld1-(int)(O.OFld.dFld))); /* O.iFld1 -= (int)O.OFld.dFld */ ;
        O = O.setOFld(O.OFld.setdFld((double)(O.OFld.dFld-(double)(Cls.instanceCount)))); /* O.OFld.dFld -=
            Cls.instanceCount */ ;
        iArr[(O.iFld1 >>> 1) % N][(O.iFld1 >>> 1) % N] += (int)Cls.fFld;
        for (i4 = 5; 147 > i4; i4++) {
            O = O.setbFld(false); /* O.bFld = false */ ;
        }
        Cls1.instanceCount = O.iFld1;
        O.OFld.lArrFld[(i5 >>> 1) % N] += (long)O.OFld.dFld;
        d = 189;
        while (--d > 0) {
            if (O.bFld) continue;
        }
        O = O.setiFld1((int)(O.iFld1&(int)(O.iFld1))); /* O.iFld1 &= O.iFld1 */ ;
        try {
            Test.instanceCount = Cls.instanceCount;
            for (i6 = 353; i6 > 12; i6 -= 2) {
                Cls.fFld += i6;
                i5 -= (int)Cls1.instanceCount;
            }
        }
        catch (ArithmeticException exc1) {
            Cls.fFld -= (float)O.OFld.dFld;
        }
        long meth_res = O.iFld1 + Double.doubleToLongBits(O.OFld.dFld) + i4 + i5 + (O.bFld ? 1 : 0) +
            Double.doubleToLongBits(d) + i6 + i7 + FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(O.OFld.lArrFld) +
            FuzzerUtils.checkSum(O) + FuzzerUtils.checkSum(O.OFld);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public  Cls() {

        instanceCount++;
        int i=25981, i1=-64876, i2=203, i3=35462, i14=12, i15=59154;
        float fArr[]=new float[N];

        FuzzerUtils.init(Cls3.OFld2.lArrFld1, -3834339130759143772L);
        FuzzerUtils.init(fArr, 0.785F);

        for (i = 201; i > 11; --i) {
            for (i2 = 1; 8 > i2; ++i2) {
                Cls.instanceCount <<= (--Cls3.OFld2.lArrFld1[i2]);
                fArr[i2 + 1] *= (float)dFld;
                i3 -= 224;
                try {
                    i3 = (i1 % i);
                    i1 = (i % i);
                    i1 = (OFld3.iFld2 % i3);
                } catch (ArithmeticException a_e) {}
                Cls4.instanceCount += (long)(0.368F + (i2 * i2));
                for (i14 = i; i14 < 2; ++i14) {
                    setOFld3(OFld3.setsFld1((short)(OFld3.sFld1-(short)(Cls4.instanceCount)))); /* OFld3.sFld1 -=
                        (short)Cls4.instanceCount */ ;
                    iArrFld[i + 1] >>= i;
                    i1 *= -5;
                    setOFld3(OFld3.setiFld2((int)(OFld3.iFld2+(int)((i14 - Cls.fFld))))); /* OFld3.iFld2 += (i14 -
                        Cls.fFld) */ ;
                    i3 <<= i14;
                    Cls3.OFld2.lArrFld1[i14] = -9;
                    Cls4.instanceCount += byFld;
                }
            }
        }
        long meth_res = i + i1 + i2 + i3 + OFld3.iFld2 + i14 + i15 + OFld3.sFld1 +
            FuzzerUtils.checkSum(Cls3.OFld2.lArrFld1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        Cls_check_sum += meth_res;
        return;
    }

}
///////////////////////////////////////////////////////////////////////
inline class Cls1 {

    public static final int N = 400;

    public static long instanceCount=-20L;
    public int iFld1=-12;
    public boolean bFld=true;
    public int iFld4=17244;
    public long lArrFld1[]=new long[N];
    public float fArrFld[][]=new float[N][N];
    public long lArrFld2[]=new long[N];
    public Cls OFld=new Cls();
    public static Cls OFld1=new Cls();
    public Cls1 setinstanceCount(long value) { Cls1.instanceCount = value; return this; };
    public Cls1 setiFld1(int value) { return __WithField(iFld1, value); };
    public Cls1 setbFld(boolean value) { return __WithField(bFld, value); };
    public Cls1 setiFld4(int value) { return __WithField(iFld4, value); };
    public Cls1 setlArrFld1(long value[]) { return __WithField(lArrFld1, value); };
    public Cls1 setfArrFld(float value[][]) { return __WithField(fArrFld, value); };
    public Cls1 setlArrFld2(long value[]) { return __WithField(lArrFld2, value); };
    public Cls1 setOFld(Cls value) { return __WithField(OFld, value); };
    public Cls1 setOFld1(Cls value) { Cls1.OFld1 = value; return this; };

}
///////////////////////////////////////////////////////////////////////
inline class Cls2 {

    public static final int N = 400;

    public static long instanceCount=226L;
    public int iFld=58674;
    public short sFld=-16171;
    public Cls2 setinstanceCount(long value) { Cls2.instanceCount = value; return this; };
    public Cls2 setiFld(int value) { return __WithField(iFld, value); };
    public Cls2 setsFld(short value) { return __WithField(sFld, value); };

    public static long Cls2_check_sum = 0;

    public  Cls2() {

        instanceCount++;
        int i8=0, i9=-10, i11=30579, i12=161, i13=80;
        double d1=-58.108211, d2=-42.25438;

        FuzzerUtils.init(Cls1.OFld1.iArrFld, -109);

        setiFld((int)(iFld^(int)(((setiFld((int)((int)iFld + 1))).iFld)))); /* iFld ^= (iFld++) */ ;
        Cls.iMeth();
        Cls1.OFld1.iArrFld[(iFld >>> 1) % N] = iFld;
        for (i8 = 3; i8 < 202; i8++) {
            boolean b=true;
            setiFld((int)((int)i9)); /* iFld = i9 */ ;
            setiFld((int)(iFld-(int)(iFld))); /* iFld -= iFld */ ;
            Cls1.OFld1.iArrFld[i8] -= sFld;
            if (b) break;
            d1 += i8;
            for (i11 = i8; i11 < 8; i11++) {
                for (d2 = 1; 1 > d2; ++d2) {
                    i9 ^= (int)-47590L;
                    setiFld((int)((int)sFld)); /* iFld = sFld */ ;
                    Cls.fFld += Cls.instanceCount;
                    i13 -= i11;
                }
            }
        }
        long meth_res = i8 + i9 + Double.doubleToLongBits(d1) + i11 + i12 + Double.doubleToLongBits(d2) + i13 +
            FuzzerUtils.checkSum(Cls1.OFld1.iArrFld);
        Cls2_check_sum += meth_res;
        return;
    }

}
///////////////////////////////////////////////////////////////////////
inline class Cls3 {

    public static final int N = 400;

    public static long instanceCount=8L;
    public static Cls1 OFld2=new Cls1();
    public Cls3 setinstanceCount(long value) { Cls3.instanceCount = value; return this; };
    public Cls3 setOFld2(Cls1 value) { Cls3.OFld2 = value; return this; };
    int placeholder = 0;

}
///////////////////////////////////////////////////////////////////////
inline class Cls4 {

    public static final int N = 400;

    public static long instanceCount=51979L;
    public int iFld2=206;
    public short sFld1=7158;
    public Cls4 setinstanceCount(long value) { Cls4.instanceCount = value; return this; };
    public Cls4 setiFld2(int value) { return __WithField(iFld2, value); };
    public Cls4 setsFld1(short value) { return __WithField(sFld1, value); };

}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  Cls ->  Cls Cls1 iMeth Cls2 Cls3 mainTest
//DEBUG  Cls1 ->  Cls1 iMeth Cls2 Cls3 mainTest
//DEBUG  Cls2 ->  Cls2
//DEBUG  iMeth ->  iMeth Cls2
//DEBUG  Cls3 ->  Cls3
//DEBUG  Cls4 ->  Cls4 Cls Cls1 iMeth Cls2 Cls3 mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 6
//DEBUG  static objects = {Cls4: [], Cls: [, Cls1.OFld1], Cls1: [, Cls3.OFld2], }
