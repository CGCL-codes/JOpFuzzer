// Generated by Java* Fuzzer test generator (1.0.001). Tue Jun 15 15:20:59 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=4026416075L;
    public static float fFld=114.998F;
    public static boolean bFld=false;
    public byte byFld=-111;
    public int iArrFld[]=new int[N];
    public static long lArrFld[][]=new long[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 101L);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i8) {

        long l=60573L, l1=2659008151546632121L;
        int i9=78, i10=42670, i11=-2, i12=36772, i13=-248, i14=-6, iArr[]=new int[N];
        byte by=-87;
        double dArr[]=new double[N];

        FuzzerUtils.init(iArr, -229);
        FuzzerUtils.init(dArr, 0.87259);

        i8 = -65;
        Test.instanceCount >>= i8;
        Test.instanceCount = Test.instanceCount;
        i8 = i8;
        iArr[(i8 >>> 1) % N] -= (int)l;
        for (i9 = 7; i9 < 226; ++i9) {
            i8 += i9;
            Test.fFld += (i9 * i9);
        }
        for (i11 = 6; i11 < 265; i11++) {
            for (i13 = 1; i13 < 6; ++i13) {
                l1 = 1;
                while (++l1 < 2) {
                    i10 *= i10;
                    i12 = by;
                    dArr[i13 + 1] = l1;
                    i10 >>= (int)l1;
                }
            }
        }
        vMeth1_check_sum += i8 + l + i9 + i10 + i11 + i12 + i13 + i14 + l1 + by + FuzzerUtils.checkSum(iArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public static long lMeth(float f, int i5, boolean b1) {

        int i6=51184, i7=6004, i15=-14, i16=0, i17=0, i18=-48308, i19=13, iArr1[][]=new int[N][N];
        short s=17280, sArr[][]=new short[N][N];
        float fArr[]=new float[N];

        FuzzerUtils.init(iArr1, -6);
        FuzzerUtils.init(fArr, -1.949F);
        FuzzerUtils.init(sArr, (short)-6743);

        for (i6 = 14; i6 < 243; ++i6) {
            byte by1=93;
            i5 <<= (int)(i5 - ((Test.instanceCount - f) + s));
            vMeth1(34978);
            Test.instanceCount = i7;
            by1 >>= (byte)i6;
            i5 += -10;
            i15 = 1;
            while (++i15 < 7) {
                Test.instanceCount = i15;
                iArr1[i15 - 1][i15 + 1] += by1;
                for (i16 = 1; 1 > i16; ++i16) {
                    Test.instanceCount = i6;
                }
                for (i18 = 1; i18 < 1; i18++) {
                    i5 -= (int)Test.instanceCount;
                    fArr = fArr;
                    sArr[i6] = sArr[i6 - 1];
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + i5 + (b1 ? 1 : 0) + i6 + i7 + s + i15 + i16 + i17 + i18 + i19 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            FuzzerUtils.checkSum(sArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void vMeth(boolean b) {

        int i4=98, i20=50050, i21=49, i22=-224, i23=-182, i24=2, i25=-61962, i26=-7, i27=-148, iArr2[][]=new int[N][N];
        short sArr1[]=new short[N];

        FuzzerUtils.init(sArr1, (short)-2687);
        FuzzerUtils.init(iArr2, 5);

        iArrFld[(i4 >>> 1) % N] = (int)((Test.lArrFld[(i4 >>> 1) % N][(i4 >>> 1) % N]--) << (lMeth(Test.fFld, -7, b) +
            i4));
        i4 *= (int)Test.instanceCount;
        for (i20 = 215; 9 < i20; i20--) {
            sArr1[i20 - 1] = (short)Test.fFld;
            iArr2 = iArr2;
        }
        iArrFld[(i21 >>> 1) % N] = i21;
        for (i22 = 6; i22 < 128; ++i22) {
            i21 += i22;
            i21 >>= i22;
            for (i24 = 1; i24 < 13; i24++) {
                for (i26 = 1; i26 < 2; ++i26) {
                    Test.fFld -= 1;
                    i25 += (i26 | i4);
                    i4 += (int)Test.fFld;
                    if (i22 != 0) {
                        vMeth_check_sum += (b ? 1 : 0) + i4 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 +
                            FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr2);
                        return;
                    }
                }
            }
        }
        vMeth_check_sum += (b ? 1 : 0) + i4 + i20 + i21 + i22 + i23 + i24 + i25 + i26 + i27 +
            FuzzerUtils.checkSum(sArr1) + FuzzerUtils.checkSum(iArr2);
    }

    public void mainTest(String[] strArr1) {

        int i=34551, i1=-28561, i2=66, i3=35, i28=-118, i29=246, i30=4622, i31=12, i32=12, i33=13294;
        short s1=-2306;
        double d=-47.85526;

        for (i = 13; i < 248; ++i) {
            i1 += i;
        }
        iArrFld[(30907 >>> 1) % N] *= (i - (i1++));
        for (i2 = 10; 342 > i2; ++i2) {
            vMeth(Test.bFld);
            for (i28 = 4; i28 < 76; ++i28) {
                Test.bFld = false;
                Test.fFld += (i28 - Test.instanceCount);
                s1 = (short)i28;
                d -= i2;
                i29 *= 49790;
                Test.instanceCount <<= byFld;
                for (i30 = 1; i30 < 2; ++i30) {
                    i31 -= i28;
                    Test.fFld += Test.fFld;
                    i29 <<= -17445;
                    Test.instanceCount += (((i30 * i29) + Test.fFld) - Test.instanceCount);
                    Test.instanceCount = i3;
                    byFld <<= (byte)i2;
                    iArrFld[i28 - 1] -= (int)Test.fFld;
                }
            }
            for (i32 = 4; i32 < 76; i32++) {
                i33 = -12566;
                byFld += (byte)(i32 * i32);
                if (Test.bFld) continue;
            }
            i3 *= -9;
            switch ((i2 % 9) + 117) {
            case 117:
                Test.fFld = -3L;
                i29 = (int)10L;
                Test.bFld = Test.bFld;
                Test.instanceCount += (((i2 * i2) + i2) - Test.fFld);
            case 118:
                Test.lArrFld[i2] = Test.lArrFld[i2 - 1];
                break;
            case 119:
                i3 >>= i31;
            case 120:
                try {
                    i29 = (i1 / -752992090);
                    i29 = (i32 % i28);
                    i1 = (i28 / -1309807624);
                } catch (ArithmeticException a_e) {}
                break;
            case 121:
                Test.instanceCount >>= i;
                break;
            case 122:
            case 123:
                Test.instanceCount |= i30;
            case 124:
                Test.fFld += i32;
                break;
            case 125:
                i1 += -7;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 i28 i29 = " + i3 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("s1 d i30 = " + s1 + "," + Double.doubleToLongBits(d) + "," + i30);
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld iArrFld Test.lArrFld = " + byFld + "," + FuzzerUtils.checkSum(iArrFld) + "," +
            FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
