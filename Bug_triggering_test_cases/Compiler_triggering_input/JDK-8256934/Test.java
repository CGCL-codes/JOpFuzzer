// Generated by Java* Fuzzer test generator (1.0.001). Sun Nov 22 09:00:39 2020
public class Test {

    public static final int N = 400;

    public static long instanceCount=-13986L;
    public static float fFld=-74.514F;
    public static boolean bFld=true;
    public static short sFld=-3381;
    public static int iFld=7;

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth(int i2, int i3, int i4) {

        int i5=-226, i6=-133, i7=1, i8=-10, i9=-10, i10=-72;
        byte by=-52;
        double d=-20.82293;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 0.300F);

        i5 = 168;
        while (--i5 > 0) {
            i6 = 1;
            do {
                i4 += (((i6 * i2) + i3) - i3);
                i2 = i4;
                i2 += i4;
                i4 += (((i6 * by) + Test.instanceCount) - Test.instanceCount);
            } while (++i6 < 9);
            if (false) break;
            i3 -= i4;
            for (i7 = 1; i7 < 9; i7++) {
                for (i9 = 1; i9 < 2; ++i9) {
                    i4 = i5;
                    d -= i4;
                    i2 -= i8;
                    fArr[i7] += Test.instanceCount;
                    i2 = i8;
                }
            }
        }
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + by + i7 + i8 + i9 + i10 + Double.doubleToLongBits(d) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public static int iMeth(int i, int i1) {

        int i11=5393, i12=-8, i14=-12, iArr[]=new int[N];
        double d1=0.117593;
        float f=-1.392F, fArr1[]=new float[N];
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, -18371);
        FuzzerUtils.init(lArr, -2485026912854769308L);
        FuzzerUtils.init(fArr1, -1.126F);

        vMeth(i, 39651, i);
        i11 = 309;
        while ((i11 -= 3) > 0) {
            i1 *= (int)d1;
            i += (int)Test.fFld;
            try {
                i = (953418437 / i);
                i12 = (i1 % iArr[i11]);
                i12 = (iArr[i11 - 1] % i12);
            } catch (ArithmeticException a_e) {}
            lArr[(i11 >>> 1) % N] -= -7;
        }
        i12 += (int)d1;
        for (int i13 : iArr) {
            i = 209;
            for (f = 1; f < 4; f++) {
                Test.instanceCount += (long)f;
                if (Test.bFld) continue;
                iArr[(int)(f - 1)] *= 18629;
                Test.sFld ^= (short)61083;
                fArr1[(int)(f)] += Test.instanceCount;
            }
        }
        long meth_res = i + i1 + i11 + Double.doubleToLongBits(d1) + i12 + Float.floatToIntBits(f) + i14 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vSmallMeth() {

        int i15=-13;

        iMeth(-37052, i15);
        Test.fFld += i15;
        vSmallMeth_check_sum += i15;
    }

    public void mainTest(String[] strArr1) {

        int i16=-1, i17=141, i18=164, i20=6, i21=-50904, i22=-79, i23=-11, i24=-107, iArr1[]=new int[N];
        double dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, 1.56913);
        FuzzerUtils.init(iArr1, 0);
        FuzzerUtils.init(byArr, (byte)30);

        for (int smallinvoc=0; smallinvoc<248; smallinvoc++) vSmallMeth();
        Test.instanceCount += Test.instanceCount;
        Test.iFld += Test.iFld;
        for (i16 = 11; i16 < 218; ++i16) {
            byte by1=-114;
            dArr[i16 + 1] -= by1;
            if (false) {
                i18 = 1;
                while (++i18 < 121) {
                    iArr1[i16 + 1] = -9;
                }
                iArr1[i16 + 1] = by1;
            } else if (Test.bFld) {
                Test.iFld = (int)Test.instanceCount;
                Test.iFld = -23551;
                iArr1[i16] &= (int)Test.instanceCount;
                Test.iFld = Test.iFld;
            } else {
                iArr1[i16 + 1] -= (int)Test.instanceCount;
                byArr[i16] = (byte)i17;
                i17 += i16;
            }
            i17 += (i16 ^ (long)Test.fFld);
            for (i20 = i16; i20 < 121; ++i20) {
                Test.instanceCount += i20;
                switch ((i20 % 2) + 68) {
                case 68:
                    for (i22 = 1; i22 > 1; i22 -= 3) {
                        i23 += (i22 * i22);
                    }
                    i23 -= i17;
                    Test.iFld = i16;
                    i24 = 1;
                    do {
                        Test.instanceCount += Test.instanceCount;
                        Test.instanceCount -= i20;
                        Test.instanceCount += (i24 * i17);
                        i17 ^= Test.iFld;
                        Test.fFld += 124L;
                    } while (++i24 < 1);
                    break;
                case 69:
                    i17 = -11;
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 dArr = " + i23 + "," + i24 + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));
        FuzzerUtils.out.println("iArr1 byArr = " + FuzzerUtils.checkSum(iArr1) + "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.bFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.sFld Test.iFld = " + Test.sFld + "," + Test.iFld);

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test
//DEBUG  iMeth ->  iMeth vSmallMeth mainTest Test
//DEBUG  vMeth ->  vMeth iMeth vSmallMeth mainTest Test
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
