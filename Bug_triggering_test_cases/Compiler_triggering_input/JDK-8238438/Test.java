// Generated by Java* Fuzzer test generator (1.0.001). Sun Feb  2 05:17:39 2020
public class Test {

    public static final int N = 400;

    public static long instanceCount=-19L;
    public static float fFld=55.919F;
    public static byte byFld=-32;
    public double dFld=-114.2225;
    public boolean bFld=true;
    public static long lArrFld[][]=new long[N][N];
    public volatile float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -639L);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(long l2, long l3, int i1) {

        int i2=-9, i3=-24377, i4=4, i5=91, iArr[]=new int[N];
        double d=62.37074;
        boolean b=true;
        float fArr[]=new float[N];
        short sArr[]=new short[N];

        FuzzerUtils.init(fArr, 12.95F);
        FuzzerUtils.init(iArr, -11);
        FuzzerUtils.init(sArr, (short)-12080);

        Test.fFld -= l3;
        for (i2 = 10; i2 < 389; ++i2) {
            fArr[i2] = l3;
            i1 >>= -8;
            iArr[i2 + 1] = i2;
            iArr[i2] += -35;
            for (i4 = 1; 4 > i4; ++i4) {
                Test.instanceCount += i4;
                i5 <<= i5;
                i3 += i4;
                Test.byFld += (byte)(((i4 * i5) + i3) - Test.instanceCount);
                Test.lArrFld[i4][i2 - 1] = (long)d;
                if (b) break;
            }
            b = b;
            i5 -= 0;
        }
        vMeth2_check_sum += l2 + l3 + i1 + i2 + i3 + i4 + i5 + Double.doubleToLongBits(d) + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth1(long l, long l1) {

        int i=-11, i6=116, i7=12, i8=2, i9=37298, i10=191, i11=-6115, iArr1[][]=new int[N][N];
        short s1=8077;
        double d1=1.68427, d2=104.90180;

        FuzzerUtils.init(iArr1, 148);

        i = i;
        vMeth2(-3890976207L, Test.instanceCount, i);
        i6 = 1;
        while (++i6 < 176) {
            i = s1;
            i -= -3;
            i = (int)l1;
            for (d1 = 9; d1 > i6; d1 -= 2) {
                Test.byFld += (byte)(((d1 * i) + i) - i);
                i = i;
                Test.byFld = (byte)-10651;
            }
            i8 = 1;
            while (++i8 < 9) {
                switch ((((i7 >>> 1) % 5) * 5) + 6) {
                case 22:
                    for (i9 = 1; i9 < 1; i9++) {
                        d2 += Test.instanceCount;
                    }
                    Test.lArrFld[i8][i6] /= (l | 1);
                    break;
                case 26:
                    i11 = i11;
                    break;
                case 7:
                    iArr1[i8 + 1][i8 + 1] >>= -7860;
                case 19:
                    Test.instanceCount = Test.instanceCount;
                    break;
                case 21:
                    s1 += (short)d2;
                }
            }
        }
        vMeth1_check_sum += l + l1 + i + i6 + s1 + Double.doubleToLongBits(d1) + i7 + i8 + i9 + i10 +
            Double.doubleToLongBits(d2) + i11 + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth() {

        int i12=-36935, i13=0, i14=-301, i15=0;
        double d3=93.70528, dArr[]=new double[N];
        boolean b1=false;

        FuzzerUtils.init(dArr, 0.99888);

        vMeth1(Test.instanceCount, Test.instanceCount);
        for (i12 = 7; i12 < 214; i12 += 2) {
            i13 += i12;
            d3 *= 8L;
            i13 = 20682;
            dArr[i12] = i12;
        }
        i13 *= (int)Test.instanceCount;
        i13 = i12;
        i13 = (int)Test.instanceCount;
        for (i14 = 307; 7 < i14; i14 -= 3) {
            if (true) {
                if (b1) {
                    i13 = i13;
                    Test.instanceCount <<= i14;
                }
            }
            Test.fFld -= -2061733566214750504L;
        }
        vMeth_check_sum += i12 + i13 + Double.doubleToLongBits(d3) + i14 + i15 + (b1 ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
    }

    public void mainTest(String[] strArr1) {

        int i16=12564, i17=148, i18=10, i19=-43929, i20=-100, i21=-9, i22=52852, i23=202, iArr2[]=new int[N];
        short s2=-31847;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)18);
        FuzzerUtils.init(iArr2, -52757);

        vMeth();
        fArrFld[(i16 >>> 1) % N] *= (float)dFld;
        for (i17 = 7; 354 > i17; ++i17) {
            Test.instanceCount >>= i18;
            i16 = i16;
            s2 += (short)i17;
        }
        Test.instanceCount <<= -63583;
        s2 = (short)i18;
        i18 = (int)Test.instanceCount;
        i16 = (int)Test.instanceCount;
        dFld *= Test.instanceCount;
        i16 <<= i18;
        byArr[(i16 >>> 1) % N] = (byte)Test.instanceCount;
        i16 = (int)Test.fFld;
        iArr2[(i17 >>> 1) % N] = i16;
        if (bFld) {
            Test.instanceCount = i18;
        }
        byArr[(9 >>> 1) % N] = (byte)i16;
        i19 = 325;
        while (--i19 > 0) {
            Test.byFld %= (byte)-85;
            Test.fFld -= i19;
            i20 -= 30853;
            i21 = 77;
            do {
                for (i22 = 1; i22 < 1; ++i22) {
                    i18 += (int)35.11378;
                    i23 = i18;
                    bFld = bFld;
                    i20 += (i22 * Test.instanceCount);
                    iArr2[i21] = i19;
                    i20 *= i16;
                }
            } while (--i21 > 0);
        }

        FuzzerUtils.out.println("i16 i17 i18 = " + i16 + "," + i17 + "," + i18);
        FuzzerUtils.out.println("s2 i19 i20 = " + s2 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("byArr iArr2 = " + FuzzerUtils.checkSum(byArr) + "," + FuzzerUtils.checkSum(iArr2));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.byFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.byFld);
        FuzzerUtils.out.println("dFld bFld Test.lArrFld = " + Double.doubleToLongBits(dFld) + "," + (bFld ? 1 : 0) +
            "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
