// Generated by Java* Fuzzer test generator (1.0.001). Sat Apr 25 03:50:23 2020
public class Test {

    public static final int N = 400;

    public static long instanceCount=6L;
    public static short sFld=29036;
    public byte byFld=-49;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.lArrFld, -16299L);
        FuzzerUtils.init(Test.iArrFld, -10);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i9, int i10) {

        int i11=-4, i12=113, i13=-38107, iArr1[]=new int[N];
        short s=13973;
        float f1=2.890F, fArr[]=new float[N];
        byte by=124;

        FuzzerUtils.init(iArr1, -41785);
        FuzzerUtils.init(fArr, -71.601F);

        i11 = 1;
        do {
            i10 = i10;
            i12 = 1;
            do {
                s *= (short)11;
                iArr1[i12 + 1] >>>= -46902;
                i10 = 34;
                fArr[i12 - 1] -= i9;
                i9 = (int)f1;
                i10 = 7;
                i9 = (int)Test.instanceCount;
                fArr[i12 + 1] *= i10;
                i13 = 1;
                do {
                    iArr1[i12] *= (int)Test.instanceCount;
                    i9 = (int)Test.instanceCount;
                    by *= (byte)i9;
                } while ((i13 += 3) < 1);
            } while (++i12 < 6);
        } while (++i11 < 289);
        long meth_res = i9 + i10 + i11 + i12 + s + Float.floatToIntBits(f1) + i13 + by + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i4, int i5) {

        int i6=-13383, i7=24403, i8=60600, i14=-240, i15=-139, i16=-1, i17=58262, iArr[]=new int[N];
        float f=-80.907F;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 40203);
        FuzzerUtils.init(lArr, -4L);

        for (i6 = 22; i6 < 376; ++i6) {
            i7 += ((i4 - (21648 - (++i5))) - i7);
            f += i6;
            Test.lArrFld[i6] -= iArr[i6];
            i8 = 1;
            do {
                i7 += (iMeth(i4, i7) + i8);
                i7 = 3779;
            } while (++i8 < 5);
            for (i14 = 1; 5 > i14; i14++) {
                i5 = i4;
                for (i16 = 1; 2 > i16; i16++) {
                    f *= Test.instanceCount;
                    Test.instanceCount += (long)1.485F;
                    i7 += Test.sFld;
                    lArr[i14 - 1] += i7;
                    iArr[i14] *= (int)Test.instanceCount;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + Float.floatToIntBits(f) + i8 + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, int i2, int i3) {

        int i18=-10, i19=-1, i20=-1, i21=18297, i22=-53, i23=5, i24=0;
        float f3=33.307F;
        boolean b=true;
        byte by1=-44;

        i2 += (int)lMeth(i18, i3);
        Test.iArrFld = Test.iArrFld;
        Test.iArrFld[(-27 >>> 1) % N] += i2;
        i18 += i2;
        for (i19 = 12; i19 < 265; i19 += 3) {
            float f2=2.809F;
            f2 += (i19 * i19);
            i18 = 62694;
        }
        f3 = i19;
        for (i21 = 1; i21 < 154; ++i21) {
            if (b) {
                b = b;
                for (i23 = 10; i23 > 1; i23 -= 3) {
                    i2 += by1;
                }
                i1 -= i23;
            } else if (b) {
                Test.sFld += (short)(i21 | i3);
            } else {
                i18 += i18;
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i18 + i19 + i20 + Float.floatToIntBits(f3) + i21 + i22 + (b ? 1 : 0) + i23 +
            i24 + by1;
    }

    public void mainTest(String[] strArr1) {

        int i=-58762, i25=171, i26=62620, i27=234, i28=-28263, i29=50287, i30=-13, i31=14, i32=244;
        double d=124.13154, d1=1.27518, dArr[]=new double[N];
        long l=-14L, l1=-11L;
        float f4=-37.446F, f5=-55.994F, f6=113.540F;
        byte byArr[]=new byte[N];

        FuzzerUtils.init(dArr, -59.41191);
        FuzzerUtils.init(byArr, (byte)-119);

        i += (int)((i - -19.122F) + Math.abs((int)(d - i)));
        vMeth(i, i, i);
        i >>= i;
        i = (int)8079525275050419390L;
        for (i25 = 7; i25 < 214; i25 += 3) {
            byFld += (byte)i25;
            for (i27 = 21; i27 < 363; ++i27) {
                i28 = Test.sFld;
                i = -156;
                i = (int)Test.instanceCount;
            }
            Test.instanceCount += (i25 - i26);
            for (l = 1; 363 > l; ++l) {
                Test.instanceCount += (long)f4;
            }
            d = i25;
            for (d1 = 16; d1 < 363; d1 += 2) {
                i += (int)(d1 * i29);
                dArr[(int)(d1 + 1)] += i30;
                i26 += (int)(d1 * d1);
                Test.instanceCount = 46;
                i29 <<= i25;
            }
            i28 *= i27;
            i29 += (i25 * i25);
            Test.instanceCount += (long)(0.635F + (i25 * i25));
        }
        i = i31;
        byArr[(i25 >>> 1) % N] = (byte)l;
        f4 *= 5;
        for (f5 = 6; 280 > f5; ++f5) {
            f4 += Test.instanceCount;
            f6 += i25;
            i |= (int)l1;
        }

        FuzzerUtils.out.println("i d i25 = " + i + "," + Double.doubleToLongBits(d) + "," + i25);
        FuzzerUtils.out.println("i26 i27 i28 = " + i26 + "," + i27 + "," + i28);
        FuzzerUtils.out.println("l i29 f4 = " + l + "," + i29 + "," + Float.floatToIntBits(f4));
        FuzzerUtils.out.println("d1 i30 i31 = " + Double.doubleToLongBits(d1) + "," + i30 + "," + i31);
        FuzzerUtils.out.println("f5 i32 f6 = " + Float.floatToIntBits(f5) + "," + i32 + "," + Float.floatToIntBits(f6));
        FuzzerUtils.out.println("l1 dArr byArr = " + l1 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            "," + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.sFld byFld = " + Test.instanceCount + "," + Test.sFld + "," +
            byFld);
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
