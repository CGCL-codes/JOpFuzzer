// Generated by Java* Fuzzer test generator (1.0.001). Tue Jul 20 13:04:08 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=-2759538032L;
    public static boolean bFld=true;
    public static short sFld=7385;
    public static volatile int iFld=12;
    public long lArrFld[]=new long[N];
    public static volatile double dArrFld[]=new double[N];
    public static short sArrFld[][]=new short[N][N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -87.107385);
        FuzzerUtils.init(Test.sArrFld, (short)16479);
        FuzzerUtils.init(Test.fArrFld, 0.344F);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2(int i12, float f1, long l2) {

        float f2=2.313F;
        int i13=-13, i14=224, i16=150, i17=-5, i18=10, iArr[]=new int[N];
        boolean b=false;
        byte by=82;

        FuzzerUtils.init(iArr, 63);

        i12 = (int)l2;
        for (f2 = 257; 16 < f2; f2--) {
            b = true;
            i14 = 1;
            do {
                i12 += (((i14 * Test.instanceCount) + i13) - i14);
                i12 <<= 5049;
                i12 += (i14 * i14);
            } while (++i14 < 7);
        }
        for (int i15 : iArr) {
            i13 <<= i14;
            i15 += i14;
            if (false) break;
            i12 += i12;
            for (i16 = 1; 4 > i16; ++i16) {
                Test.instanceCount >>= 14L;
                Test.instanceCount = Test.instanceCount;
                i18 = 1;
                do {
                    Test.dArrFld[i18 - 1] += by;
                } while (++i18 < 2);
                l2 += (i16 * i16);
                i12 += (int)Test.instanceCount;
                i15 <<= (int)Test.instanceCount;
            }
        }
        vMeth2_check_sum += i12 + Float.floatToIntBits(f1) + l2 + Float.floatToIntBits(f2) + i13 + (b ? 1 : 0) + i14 +
            i16 + i17 + i18 + by + FuzzerUtils.checkSum(iArr);
    }

    public static int iMeth(int i10, int i11) {

        float f3=17.128F, f4=37.839F, fArr[]=new float[N];
        int i19=12, i20=5, i21=40181, i22=-12, iArr1[]=new int[N];
        byte by1=-77;

        FuzzerUtils.init(iArr1, 17449);
        FuzzerUtils.init(fArr, -33.783F);

        vMeth2(i11, -121.139F, Test.instanceCount);
        i11 += (int)f3;
        try {
            i10 = i11;
        }
        catch (ArithmeticException exc1) {
            f3 *= i11;
        }
        finally {
            Test.instanceCount += i11;
            for (i19 = 4; i19 < 223; i19 += 3) {
                switch ((((i10 >>> 1) % 2) * 5) + 77) {
                case 80:
                    i20 = (int)Test.instanceCount;
                    switch ((i19 % 2) + 36) {
                    case 36:
                        try {
                            i20 = (-6690 % i10);
                            iArr1[i19] = (133179052 % i19);
                            i10 = (iArr1[i19 + 1] / 22772);
                        } catch (ArithmeticException a_e) {}
                        f4 = 1;
                        do {
                            by1 += (byte)(f4 * Test.instanceCount);
                            Test.instanceCount += i20;
                            for (i21 = 1; i21 < 1; ++i21) {
                                f3 += (float)1.60576;
                                if (Test.bFld) continue;
                                fArr[i21 + 1] += i11;
                                f3 += i11;
                                i10 += (int)(41L + (i21 * i21));
                            }
                        } while (++f4 < 21);
                    case 37:
                        Test.instanceCount += i21;
                        break;
                    default:
                        i20 += (i19 + i19);
                    }
                    break;
                case 83:
                    iArr1[i19 - 1] = (int)Test.instanceCount;
                    break;
                default:
                    fArr = fArr;
                }
            }
        }
        long meth_res = i10 + i11 + Float.floatToIntBits(f3) + i19 + i20 + Float.floatToIntBits(f4) + by1 + i21 + i22 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, int i6) {

        int i7=47, i8=-63021, i9=5, i23=3, iArr2[][]=new int[N][N];
        long l3=6827L, l4=-7166042301271537490L;
        float f5=0.692F, fArr1[]=new float[N];
        double d=2.43169;
        short s1=18450;
        byte by2=-44;

        FuzzerUtils.init(fArr1, 104.421F);
        FuzzerUtils.init(iArr2, 56476);

        for (i7 = 284; 6 < i7; --i7) {
            i9 = (int)(Integer.reverseBytes(iMeth(i6, i9)) & Test.instanceCount);
            i23 = 6;
            while (--i23 > 0) {
                fArr1[(i7 >>> 1) % N] += 117;
                iArr2[i7][i7] = (int)l3;
                i5 -= i5;
                l4 = 1;
                do {
                    f5 = (float)d;
                    s1 = s1;
                    d -= i6;
                    i5 = (int)f5;
                    switch ((((i6 >>> 1) % 6) * 5) + 9) {
                    case 37:
                        try {
                            i6 = (i6 % iArr2[i23 + 1][i7 - 1]);
                            i9 = (i9 % 201);
                            i6 = (i6 % -153);
                        } catch (ArithmeticException a_e) {}
                        switch (((i9 >>> 1) % 8) + 122) {
                        case 122:
                            i9 = i9;
                            d /= (i8 | 1);
                            by2 <<= (byte)139;
                            s1 = (short)i8;
                            break;
                        case 123:
                            d += i9;
                            i9 >>= (int)l3;
                            break;
                        case 124:
                            Test.instanceCount <<= Test.instanceCount;
                        case 125:
                            i9 *= i9;
                        case 126:
                            i8 >>= -181;
                            break;
                        case 127:
                            iArr2[i7] = FuzzerUtils.int1array(N, (int)24);
                        case 128:
                            if (false) continue;
                            break;
                        case 129:
                            i6 = (int)l4;
                            break;
                        default:
                            if (Test.bFld) continue;
                        }
                        break;
                    case 17:
                        i5 *= (int)Test.instanceCount;
                    case 25:
                        Test.instanceCount = l4;
                        break;
                    case 16:
                        d = i9;
                        break;
                    case 24:
                        i8 = i23;
                        break;
                    case 31:
                        i6 <<= i5;
                        break;
                    }
                } while (++l4 < 1);
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + i9 + i23 + l3 + l4 + Float.floatToIntBits(f5) +
            Double.doubleToLongBits(d) + s1 + by2 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr2);
    }

    public void vMeth(int i2, long l, long l1) {

        int i3=26713, i4=-11998, i24=-6, i25=41673, i26=-28, i27=-64305, i28=114, i29=-226, i30=6, iArr3[]=new int[N];
        short s=-28512;
        long l5=2319394923L;

        FuzzerUtils.init(iArr3, 34747);

        for (i3 = 14; i3 < 312; ++i3) {
            float f=0.724F;
            lArrFld[i3] ^= i4;
            f = ((i4++) * (s++));
        }
        vMeth1(i3, i2);
        i4 = 14;
        for (i24 = 3; i24 < 275; ++i24) {
            Test.sArrFld[i24 - 1][i24] -= (short)-57;
            for (i26 = i24; i26 < 6; i26++) {
                for (i28 = 1; i28 < 1; i28++) {
                    i25 ^= (int)l5;
                    l += i29;
                    iArr3[i24] += i29;
                    Test.bFld = false;
                    l += (i28 | i3);
                }
                i25 += i24;
                i4 += i3;
                if (Test.bFld) {
                    try {
                        i25 = (i25 % -22);
                        i29 = (55062 / i28);
                        i4 = (i25 % i24);
                    } catch (ArithmeticException a_e) {}
                }
                iArr3[i26 - 1] = i26;
                try {
                    iArr3[i26] = (iArr3[i24 - 1] / i30);
                    i30 = (iArr3[i26 + 1] / iArr3[i26 - 1]);
                    i25 = (i29 % -112);
                } catch (ArithmeticException a_e) {}
            }
        }
        vMeth_check_sum += i2 + l + l1 + i3 + i4 + s + i24 + i25 + i26 + i27 + i28 + i29 + l5 + i30 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=15, i1=-3, i31=-1, i32=-67, i33=-52758, i34=-31663, i35=-3, iArr4[]=new int[N];
        double d1=1.56330;
        byte by3=97;

        FuzzerUtils.init(iArr4, 13);

        for (i = 17; i < 393; i++) {
            float f6=1.126F;
            vMeth(26, Test.instanceCount, Test.instanceCount);
            if (Test.bFld) break;
            i1 = Test.sFld;
            f6 += (float)-1.70188;
            d1 *= Test.instanceCount;
            for (i31 = 1; 67 > i31; i31++) {
                Test.instanceCount += (long)(-30.773F + (i31 * i31));
                i1 *= i32;
                for (i33 = i31; i33 < 2; ++i33) {
                    i34 *= (int)Test.instanceCount;
                    by3 += (byte)(((i33 * i1) + Test.instanceCount) - i33);
                    i32 += i33;
                    Test.sFld = (short)Test.instanceCount;
                    i34 += (i33 | i33);
                    lArrFld[i31] -= i35;
                    iArr4[i - 1] = i35;
                    f6 -= by3;
                    i35 -= i31;
                    i1 *= (int)Test.instanceCount;
                    switch ((((Test.iFld >>> 1) % 8) * 5) + 83) {
                    case 84:
                        Test.fArrFld[i] += i34;
                        try {
                            i34 = (-31978 % i32);
                            i1 = (i35 % i35);
                            iArr4[i33 + 1] = (26301 / Test.iFld);
                        } catch (ArithmeticException a_e) {}
                        d1 = Test.instanceCount;
                        if (Test.bFld) break;
                        d1 = Test.instanceCount;
                        f6 = i33;
                    case 117:
                        try {
                            Test.iFld = (980189496 / i1);
                            i35 = (Test.iFld / -50418);
                            Test.iFld = (iArr4[i31 - 1] % 125);
                        } catch (ArithmeticException a_e) {}
                        d1 += by3;
                        break;
                    case 111:
                        i32 -= i31;
                        lArrFld[i31 + 1] = Test.instanceCount;
                        break;
                    case 119:
                        iArr4[i + 1] <<= Test.sFld;
                        Test.iFld += (((i33 * i35) + Test.instanceCount) - by3);
                        i1 = (int)f6;
                        iArr4[i31 + 1] *= i31;
                        break;
                    case 99:
                        Test.instanceCount -= (long)d1;
                        if (Test.bFld) break;
                        break;
                    case 106:
                        i1 = Test.iFld;
                        f6 *= i31;
                        break;
                    case 102:
                    case 118:
                        i32 = i35;
                        break;
                    default:
                        Test.bFld = Test.bFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 d1 = " + i + "," + i1 + "," + Double.doubleToLongBits(d1));
        FuzzerUtils.out.println("i31 i32 i33 = " + i31 + "," + i32 + "," + i33);
        FuzzerUtils.out.println("i34 by3 i35 = " + i34 + "," + by3 + "," + i35);
        FuzzerUtils.out.println("iArr4 = " + FuzzerUtils.checkSum(iArr4));

        FuzzerUtils.out.println("Test.instanceCount Test.bFld Test.sFld = " + Test.instanceCount + "," + (Test.bFld ? 1
            : 0) + "," + Test.sFld);
        FuzzerUtils.out.println("Test.iFld lArrFld Test.dArrFld = " + Test.iFld + "," + FuzzerUtils.checkSum(lArrFld) +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.sArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.sArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}
