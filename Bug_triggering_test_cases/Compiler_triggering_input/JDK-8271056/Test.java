// Generated by Java* Fuzzer test generator (1.0.001). Tue Jul 20 21:39:26 2021
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-14L;
    public int iFld=199;
    public double dFld=-56.23767;
    public static float fFld=38.664F;
    public static boolean bFld=true;
    public static byte byFld=-40;
    public static double dFld1=110.83810;
    public short sFld=32184;
    public static double dArrFld[]=new double[N];
    public static volatile long lArrFld[]=new long[N];
    public static short sArrFld[]=new short[N];
    public static byte byArrFld[]=new byte[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 2.50429);
        FuzzerUtils.init(Test.lArrFld, -1809026386361100220L);
        FuzzerUtils.init(Test.sArrFld, (short)31076);
        FuzzerUtils.init(Test.byArrFld, (byte)-102);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static void vMeth1(int i8, int i9, int i10) {


        Test.fFld += Test.fFld;
        vMeth1_check_sum += i8 + i9 + i10;
    }

    public static int iMeth1(int i12, long l4, float f1) {

        int i13=0, i14=6048, i15=-191, i16=-17765, i17=221, i18=-9, i19=193, i20=237, iArr2[]=new int[N];
        double d1=61.58926;
        byte by=5;
        short s=-2051;
        boolean b=false;
        float fArr1[]=new float[N];

        FuzzerUtils.init(fArr1, 1.922F);
        FuzzerUtils.init(iArr2, 42970);

        fArr1[(i12 >>> 1) % N] = i12;
        i13 = 1;
        while (++i13 < 242) {
            i12 *= 13728;
            for (i14 = 1; i14 < 7; i14 += 2) {
                i15 = i13;
                d1 /= (i12 | 1);
            }
            by += (byte)i12;
            for (i16 = 1; i16 < 7; ++i16) {
                if (false) break;
                l4 = s;
                i15 -= (int)-524934612480523950L;
                if (i15 != 0) {
                }
            }
            iArr2 = iArr2;
            i18 = 7;
            while (--i18 > 0) {
                iArr2[i13] <<= by;
            }
            switch (((i13 % 1) * 5) + 14) {
            case 18:
            }
            for (i19 = i13; i19 < 7; i19++) {
                b = b;
            }
            iArr2[i13] = i20;
            i12 = 53386;
        }
        long meth_res = i12 + l4 + Float.floatToIntBits(f1) + i13 + i14 + i15 + Double.doubleToLongBits(d1) + by + i16
            + i17 + s + i18 + i19 + i20 + (b ? 1 : 0) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)) +
            FuzzerUtils.checkSum(iArr2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i11, long l2, long l3) {

        int i21=-6, i22=41240, i23=62769, i24=-72, i25=10, i26=-6392, i27=-40704, iArr1[]=new int[N];
        float f2=0.929F;

        FuzzerUtils.init(iArr1, 96);

        Test.dArrFld[(i11 >>> 1) % N] -= Math.abs(Test.fFld);
        i11 = iArr1[(-37367 >>> 1) % N];
        if (Test.bFld) {
            iArr1[(i11 >>> 1) % N] = (iMeth1(-2, l3, Test.fFld) - -15189);
        } else {
            for (i21 = 14; i21 < 246; i21++) {
                for (i23 = 7; i23 > 1; i23 -= 2) {
                    i22 = Test.byFld;
                    Test.dFld1 += Test.dFld1;
                    for (f2 = 1; f2 < 3; ++f2) {
                        short s1=2240;
                        Test.lArrFld[i23 + 1] *= i22;
                        Test.bFld = Test.bFld;
                        s1 += (short)(((f2 * s1) + i11) - i23);
                    }
                    for (i26 = i21; i26 < 3; ++i26) {
                        i25 += (i26 * i26);
                        i24 <<= 193;
                        i24 += i26;
                        l3 = i25;
                        i24 = (int)1.99F;
                        i22 = (int)Test.fFld;
                        if (i25 != 0) {
                        }
                    }
                }
            }
        }
        long meth_res = i11 + l2 + l3 + i21 + i22 + i23 + i24 + Float.floatToIntBits(f2) + i25 + i26 + i27 +
            FuzzerUtils.checkSum(iArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i5, long l1) {

        double d=-1.99842;
        int i6=6, i7=-14, i28=-252, i29=-5, i30=7, i31=-12;
        short s2=-14736;
        float f3=36.993F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -2.842F);

        i5 -= Math.min((int)((-149 + (--fArr[(i5 >>> 1) % N])) - (52 + d)), 43561);
        for (i6 = 1; 301 > i6; i6++) {
            vMeth1(iMeth(8, l1, Test.instanceCount), i7, -245);
            Test.dFld1 -= -212;
            Test.dArrFld[i6] = Test.fFld;
            switch ((((i7 >>> 1) % 2) * 5) + 20) {
            case 29:
                for (i28 = 1; i28 < 6; ++i28) {
                    i7 += i7;
                    Test.instanceCount /= 38602;
                    i5 = 62;
                    i5 *= (int)Test.instanceCount;
                    Test.fFld = s2;
                    Test.byFld += (byte)i28;
                    l1 = i5;
                }
                l1 += 175;
                l1 -= i6;
                break;
            case 26:
                for (i30 = 1; i30 < 6; ++i30) {
                    f3 -= i5;
                    Test.sArrFld = Test.sArrFld;
                    if (Test.bFld) continue;
                }
                break;
            }
        }
        vMeth_check_sum += i5 + l1 + Double.doubleToLongBits(d) + i6 + i7 + i28 + i29 + s2 + i30 + i31 +
            Float.floatToIntBits(f3) + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
    }

    public long lMeth() {

        long l=-108L, l5=3475558011089451162L;
        int i4=-8240, i33=51925, i34=56, iArr3[]=new int[N];

        FuzzerUtils.init(iArr3, -92);

        for (l = 20; 394 > l; ++l) {
            vMeth(i4, 1812848763L);
            if (Test.bFld) {
                Test.instanceCount <<= i4;
            } else if (Test.bFld) {
                i4 -= (int)l5;
                i33 = 1;
                do {
                    i4 = (int)Test.instanceCount;
                    if (i33 != 0) {
                    }
                    i34 = 1;
                    do {
                        iFld <<= i4;
                        l5 *= i4;
                        switch ((int)((l % 9) + 122)) {
                        case 122:
                            iArr3[(int)(l - 1)] |= (int)l5;
                            iFld += i34;
                            i4 <<= i4;
                            Test.byArrFld[i33] = Test.byFld;
                            iFld += i34;
                            iArr3 = iArr3;
                        case 123:
                            sFld >>= (short)2545705507L;
                            iArr3 = FuzzerUtils.int1array(N, (int)14377);
                            break;
                        case 124:
                            iFld = -26021;
                        case 125:
                            iFld *= Test.byFld;
                            break;
                        case 126:
                            Test.byFld += (byte)i34;
                            break;
                        case 127:
                            if (i4 != 0) {
                            }
                            break;
                        case 128:
                            Test.fFld = Test.byFld;
                            break;
                        case 129:
                            i4 |= iFld;
                        case 130:
                            i4 = iFld;
                        }
                    } while (++i34 < 1);
                } while (++i33 < 5);
            }
        }
        long meth_res = l + i4 + l5 + i33 + i34 + FuzzerUtils.checkSum(iArr3);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=5, i1=-6, i2=-13, i3=7, i35=64, i36=-48066, i37=-3, i38=164, i39=-157, i40=-52916, i41=178, iArr[]=new
            int[N], iArr4[]=new int[N];
        float f=-1.730F;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, 8);
        FuzzerUtils.init(iArr4, -50276);
        FuzzerUtils.init(bArr, true);

        iArr = FuzzerUtils.int1array(N, (int)-61803);
        iFld = iFld;
        for (i = 7; 247 > i; ++i) {
            iArr[i - 1] += (int)(((Test.instanceCount / (i | 1)) << Math.abs(i)) - ((Test.instanceCount + 45.50385) +
                (dFld + iFld)));
            iFld -= (((i1 - -59183) + (++iArr[i + 1])) - (++iFld));
            for (i2 = 4; i2 < 105; ++i2) {
                iArr[i2 + 1] = (int)(i1 - Test.instanceCount);
                iArr[i2] -= (int)((++i3) + (-f));
                f -= lMeth();
                iArr[i2] &= sFld;
            }
            for (i35 = 5; 105 > i35; ++i35) {
                i37 = 2;
                while (--i37 > 0) {
                    Test.instanceCount -= iFld;
                    Test.instanceCount += (i37 - i2);
                    Test.instanceCount = (long)Test.dFld1;
                    Test.fFld /= -56603L;
                    Test.byFld = (byte)Test.instanceCount;
                }
            }
            iArr[i] += 29355;
            iArr[i - 1] += -28496;
            for (i38 = 1; i38 < 105; i38++) {
                long l6=1642047882L;
                iArr[i38] += i2;
                l6 = 10;
                i36 = (int)Test.instanceCount;
                dFld += 97;
                i39 += i2;
                Test.fFld = f;
                i36 += (i38 ^ l6);
                for (i40 = 1; i40 < 2; ++i40) {
                    switch (((i38 % 9) * 5) + 10) {
                    case 49:
                        if (Test.bFld) {
                            i1 += (int)(2.937F + (i40 * i40));
                            l6 &= l6;
                            Test.fFld = i36;
                            if (Test.bFld) continue;
                            i41 >>= (int)-162L;
                            Test.byFld -= (byte)Test.instanceCount;
                        } else {
                            iArr[i] >>>= i35;
                            if (Test.bFld) continue;
                            l6 = Test.instanceCount;
                            Test.lArrFld[i - 1] = Test.instanceCount;
                        }
                        break;
                    case 30:
                        iArr4[i40 - 1] += 251;
                        break;
                    case 46:
                        Test.fFld -= Test.fFld;
                        break;
                    case 50:
                        Test.instanceCount = iFld;
                        break;
                    case 40:
                        i39 += (i40 * i40);
                        break;
                    case 47:
                        l6 += (((i40 * i39) + l6) - l6);
                        break;
                    case 16:
                        iArr4[i40 - 1] = (int)-237L;
                        break;
                    case 39:
                        iFld |= i;
                    case 25:
                        i1 *= -154;
                        break;
                    default:
                        bArr[(i35 >>> 1) % N] = Test.bFld;
                    }
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 f i35 = " + i3 + "," + Float.floatToIntBits(f) + "," + i35);
        FuzzerUtils.out.println("i36 i37 i38 = " + i36 + "," + i37 + "," + i38);
        FuzzerUtils.out.println("i39 i40 i41 = " + i39 + "," + i40 + "," + i41);
        FuzzerUtils.out.println("iArr iArr4 bArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(iArr4) +
            "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount iFld dFld = " + Test.instanceCount + "," + iFld + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.fFld Test.bFld Test.byFld = " + Float.floatToIntBits(Test.fFld) + "," +
            (Test.bFld ? 1 : 0) + "," + Test.byFld);
        FuzzerUtils.out.println("Test.dFld1 sFld Test.dArrFld = " + Double.doubleToLongBits(Test.dFld1) + "," + sFld +
            "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.sArrFld Test.byArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.sArrFld) + "," + FuzzerUtils.checkSum(Test.byArrFld));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth lMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth lMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}
