// Generated by Java* Fuzzer Test2 generator (1.0.001). Thu Jul 22 22:09:45 2021
public class Test2 {

    public static final int N = 400;

    public static long instanceCount=-2135376758605885377L;
    public static boolean bFld=false;
    public static byte byFld=-105;
    public static double dFld=-2.77420;
    public static int iFld=3;
    public short sFld=26518;
    public static volatile int iArrFld[]=new int[N];
    public static boolean bArrFld[]=new boolean[N];

    static {
        FuzzerUtils.init(Test2.iArrFld, 90);
        FuzzerUtils.init(Test2.bArrFld, false);
    }

    public static long iMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l, byte by, long l1) {

        int i2=-11, i3=56214, i4=10, i5=2662, iArr[][]=new int[N][N];
        float f=0.369F;
        long l2=-6L;
        double d=21.91731;

        FuzzerUtils.init(iArr, -14);

        for (i2 = 12; i2 < 380; i2++) {
            i3 >>= i2;
            iArr[i2][i2] &= i3;
            i3 = i3;
            iArr[i2 + 1][i2 - 1] = -1;
            i4 = 1;
            while ((i4 += 2) < 5) {
                i5 = 1;
                do {
                    iArr[i2 + 1] = iArr[i2];
                    i3 = (int)f;
                    i3 -= (int)f;
                    i3 = -249;
                    i3 += (int)f;
                } while (++i5 < 3);
                Test2.bFld = Test2.bFld;
                l2 *= (long)d;
                i3 *= i2;
            }
        }
        long meth_res = l + by + l1 + i2 + i3 + i4 + i5 + Float.floatToIntBits(f) + l2 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static boolean bMeth(int i1) {

        float f1=-126.340F;
        int i6=-219, i7=-13, i8=-4613, i9=-39449, iArr1[]=new int[N], iArr2[]=new int[N];
        short s=18439;

        FuzzerUtils.init(iArr1, -9);
        FuzzerUtils.init(iArr2, -41952);

        fMeth(Test2.instanceCount, Test2.byFld, Test2.instanceCount);
        f1 *= i1;
        for (i6 = 122; i6 > 6; i6--) {
            i1 <<= i6;
            i1 += (((i6 * s) + i1) - i1);
            Test2.instanceCount = Test2.instanceCount;
            switch (((i7 >>> 1) % 5) + 48) {
            case 48:
                s -= (short)i1;
                i1 = i7;
                break;
            case 49:
                for (i8 = 1; i8 < 13; ++i8) {
                    if (true) {
                        i9 >>= i1;
                        iArr1[i8 + 1] |= i1;
                        i1 *= i1;
                        Test2.bFld = Test2.bFld;
                    } else {
                        if (Test2.bFld) break;
                    }
                }
                break;
            case 50:
                iArr1[i6] = (int)Test2.instanceCount;
                break;
            case 51:
                iArr1[i6 - 1] += s;
                break;
            case 52:
                Test2.instanceCount += i6;
            default:
                iArr2[i6 - 1] -= (int)Test2.dFld;
            }
        }
        long meth_res = i1 + Float.floatToIntBits(f1) + i6 + i7 + s + i8 + i9 + FuzzerUtils.checkSum(iArr1) +
            FuzzerUtils.checkSum(iArr2);
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static int iMeth(int i) {

        float f2=-69.424F, fArr[]=new float[N];
        int i10=59682, i11=-10, i12=203, i13=9;
        long lArr[]=new long[N];

        FuzzerUtils.init(fArr, 0.34F);
        FuzzerUtils.init(lArr, 60333L);

        Test2.bFld = bMeth(13);
        Test2.instanceCount -= 245L;
        fArr[(i >>> 1) % N] = i;
        if (Test2.bFld) {
            i -= (int)f2;
            i -= -54915;
        } else if (Test2.bFld) {
            for (i10 = 5; i10 < 206; ++i10) {
                if (i10 != 0) {
                }
                lArr[i10] *= (long)f2;
                switch ((i10 % 2) + 95) {
                case 95:
                case 96:
                    for (i12 = 1; i12 < 8; i12++) {
                        Test2.instanceCount += (i12 ^ i11);
                        f2 *= 6988806734471474137L;
                        Test2.iArrFld[i10] >>= (int)Test2.instanceCount;
                        i += i12;
                    }
                }
            }
        } else {
            Test2.iArrFld[(-926 >>> 1) % N] >>= i11;
        }
        long meth_res = i + Float.floatToIntBits(f2) + i10 + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + FuzzerUtils.checkSum(lArr);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest2(String[] strArr1) {

        int i14=19127, i15=10, i16=-25107, i17=-14, i19=-166, i20=-56442, i21=103, i22=28625, i23=-21, i24=-21743,
            i25=207;
        long lArr1[][]=new long[N][N];

        FuzzerUtils.init(lArr1, -3L);

        Test2.instanceCount *= (iMeth(5) + Test2.iFld);
        Test2.instanceCount += Test2.iFld;
        if (Test2.bFld) {
            for (i14 = 5; i14 < 339; i14++) {
                int i18=9;
                for (i16 = 3; i16 < 75; ++i16) {
                    if (true) break;
                }
                i18 += (int)Test2.dFld;
                i15 = i14;
                for (i19 = 1; i19 < 75; ++i19) {
                    Test2.instanceCount >>= Test2.byFld;
                    i17 += i20;
                    i17 = (int)Test2.instanceCount;
                    i21 = 1;
                    while (++i21 < 2) {
                        lArr1[i14][i14 + 1] += (long)1.616F;
                        i18 ^= (int)Test2.instanceCount;
                        Test2.instanceCount -= i17;
                        Test2.bArrFld[i21] = Test2.bFld;
                        Test2.iFld -= i21;
                        Test2.instanceCount = (long)-18.169F;
                    }
                    for (i22 = 1; i22 < 2; i22++) {
                        Test2.dFld = i17;
                        lArr1[i14 + 1][i22] -= i14;
                        i15 += i22;
                        i15 = i14;
                        i17 -= i16;
                        Test2.instanceCount = i20;
                    }
                    i24 = 1;
                    do {
                        i23 *= 138;
                        sFld += (short)i24;
                        i25 >>= i15;
                    } while (++i24 < 2);
                }
            }
        } else if (Test2.bFld) {
            Test2.instanceCount = (long)Test2.dFld;
        } else {
            lArr1[(i22 >>> 1) % N][(-103 >>> 1) % N] += 91;
        }

        FuzzerUtils.out.println("i14 i15 i16 = " + i14 + "," + i15 + "," + i16);
        FuzzerUtils.out.println("i17 i19 i20 = " + i17 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("i24 i25 lArr1 = " + i24 + "," + i25 + "," + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test2.instanceCount Test2.bFld Test2.byFld = " + Test2.instanceCount + "," + (Test2.bFld ?
            1 : 0) + "," + Test2.byFld);
        FuzzerUtils.out.println("Test2.dFld Test2.iFld sFld = " + Double.doubleToLongBits(Test2.dFld) + "," + Test2.iFld +
            "," + sFld);
        FuzzerUtils.out.println("Test2.iArrFld Test2.bArrFld = " + FuzzerUtils.checkSum(Test2.iArrFld) + "," +
            FuzzerUtils.checkSum(Test2.bArrFld));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test2 _instance = new Test2();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest2(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test2 ->  Test2
//DEBUG  main ->  main
//DEBUG  mainTest2 ->  mainTest2
//DEBUG  iMeth ->  iMeth mainTest2
//DEBUG  bMeth ->  bMeth iMeth mainTest2
//DEBUG  fMeth ->  fMeth bMeth iMeth mainTest2
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
