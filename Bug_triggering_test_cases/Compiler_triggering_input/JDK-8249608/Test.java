// Generated by Java* Fuzzer test generator (1.0.001). Mon May 25 22:43:36 2020
public class Test {

    public static final int N = 400;

    public static long instanceCount=127L;
    public byte byFld=3;
    public static int iFld=5;
    public short sFld=18840;
    public boolean bFld=false;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 64);
        FuzzerUtils.init(Test.lArrFld, 64008L);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i8=206, i9=-19293, i10=-23, i11=20194, i12=-18149, i13=62263;
        float f1=1.28F;
        double d1=0.96784;

        i8 = 1;
        while (++i8 < 205) {
            Test.lArrFld[i8 - 1] -= (long)f1;
            Test.iArrFld[i8 + 1] = (int)f1;
        }
        d1 = i8;
        Test.lArrFld[(i8 >>> 1) % N] >>= Test.instanceCount;
        i9 = 1;
        do {
            Test.iArrFld[i9] += -12;
            Test.iArrFld = Test.iArrFld;
            for (i10 = i9; i10 < 4; ++i10) {
                for (i12 = 1; i12 > i10; i12 -= 3) {
                    f1 += Test.instanceCount;
                    f1 += (((i12 * i9) + Test.iFld) - Test.iFld);
                    try {
                        i13 = (i8 % 172);
                        i13 = (Test.iFld / Test.iArrFld[i10]);
                        i13 = (Test.iFld % -49125);
                    } catch (ArithmeticException a_e) {}
                    i11 = i12;
                    i11 -= i13;
                }
            }
        } while (++i9 < 397);
        vMeth_check_sum += i8 + Float.floatToIntBits(f1) + Double.doubleToLongBits(d1) + i9 + i10 + i11 + i12 + i13;
    }

    public static int iMeth1() {

        int i5=11711, i6=-1, i7=-6;
        long l1=-2L;
        byte by=45;
        float f2=1.813F;

        Test.iFld = (--Test.iFld);
        for (i5 = 2; 123 > i5; i5++) {
            for (l1 = 1; l1 < 13; ++l1) {
                Test.iArrFld = (Test.iArrFld = (Test.iArrFld = (Test.iArrFld = Test.iArrFld)));
                by += (byte)(l1 | i6);
                Test.iFld += (int)(((l1 * by) + l1) - Test.instanceCount);
            }
            i7 -= (int)l1;
            vMeth();
            Test.iFld -= (int)l1;
            Test.iFld = i5;
            Test.instanceCount += (((i5 * Test.instanceCount) + Test.iFld) - i5);
            i6 = Test.iFld;
            Test.lArrFld[i5] >>>= i6;
            Test.instanceCount = l1;
            f2 += (i5 * l1);
        }
        long meth_res = i5 + i6 + l1 + i7 + by + Float.floatToIntBits(f2);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public int iMeth(short s, double d) {

        int i3=25, i4=-52, i14=-138, i15=55224;
        boolean b=true;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, 1.321F);

        for (float f : fArr) {
            for (i3 = 1; 4 > i3; i3++) {
                Test.iArrFld[i3 - 1] -= iMeth1();
                fArr[i3] -= i3;
                for (i14 = 1; i14 < 2; i14 += 2) {
                    if (b) break;
                    i4 += (((i14 * i14) + i15) - i3);
                    i4 = 38;
                    i4 += i15;
                    Test.iFld *= i4;
                    Test.instanceCount = i3;
                    i4 -= (int)Test.instanceCount;
                    Test.instanceCount += (long)d;
                    f += ((long)i14 | (long)i15);
                    Test.instanceCount += Test.instanceCount;
                }
            }
        }
        long meth_res = s + Double.doubleToLongBits(d) + i3 + i4 + i14 + i15 + (b ? 1 : 0) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=31401, i1=-121, i2=-26663, i16=13, i18=166, i19=44632, i20=-51003, i21=-245;
        double d2=-2.86943, dArr[]=new double[N];
        float f3=-84.346F, f4=0.717F;

        FuzzerUtils.init(dArr, -1.81657);

        for (i = 14; 231 > i; ++i) {
            i2 = 116;
            while (--i2 > 0) {
                long l=24133L;
                i1 &= (int)((i + (10 + (i2 + l))) - l);
            }
            i1 &= (Test.iArrFld[i] >>= (Test.iArrFld[i + 1]--));
            i1 = (int)((Test.instanceCount++) * (byFld - Math.max(i2, i)));
        }
        iMeth(sFld, d2);
        for (f3 = 9; f3 < 355; f3++) {
            i1 = 71;
            i16 += (int)d2;
            Test.instanceCount = Test.iFld;
            if (bFld) continue;
            switch ((int)((f3 % 5) + 17)) {
            case 17:
                for (i18 = 4; 73 > i18; ++i18) {
                    for (i20 = 1; i20 < 2; ++i20) {
                        switch ((i20 % 6) + 76) {
                        case 76:
                            Test.iFld /= (int)(sFld | 1);
                            i1 += (int)f3;
                        case 77:
                            Test.instanceCount += (((i20 * i1) + Test.instanceCount) - Test.iFld);
                            i16 >>= sFld;
                        case 78:
                            i16 = (int)Test.instanceCount;
                            Test.iArrFld[i20] = i2;
                            Test.iFld += i20;
                            i1 += i2;
                            break;
                        case 79:
                            d2 *= Test.instanceCount;
                            i16 = i;
                            if (bFld) {
                                d2 = Test.iFld;
                                byFld += (byte)i18;
                                i21 = i19;
                                f4 %= (Test.instanceCount | 1);
                            } else if (true) {
                                Test.instanceCount = i16;
                            } else if (bFld) {
                                if (false) break;
                            } else {
                                Test.iArrFld[i20 - 1] = i19;
                            }
                            break;
                        case 80:
                            dArr[(int)(f3 + 1)] = Test.instanceCount;
                        case 81:
                            Test.instanceCount = -1L;
                            break;
                        }
                    }
                }
                break;
            case 18:
                Test.instanceCount += (long)(f3 * f3);
                break;
            case 19:
                Test.iArrFld[(int)(f3)] = Test.iFld;
                break;
            case 20:
                i16 += (int)(5023903497050967706L + (f3 * f3));
            case 21:
                bFld = bFld;
                break;
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("d2 f3 i16 = " + Double.doubleToLongBits(d2) + "," + Float.floatToIntBits(f3) + "," +
            i16);
        FuzzerUtils.out.println("i18 i19 i20 = " + i18 + "," + i19 + "," + i20);
        FuzzerUtils.out.println("i21 f4 dArr = " + i21 + "," + Float.floatToIntBits(f4) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount byFld Test.iFld = " + Test.instanceCount + "," + byFld + "," +
            Test.iFld);
        FuzzerUtils.out.println("sFld bFld Test.iArrFld = " + sFld + "," + (bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld = " + FuzzerUtils.checkSum(Test.lArrFld));

        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
