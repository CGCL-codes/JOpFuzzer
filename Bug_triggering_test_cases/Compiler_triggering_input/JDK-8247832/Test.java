// Generated by Java* Fuzzer test generator (1.0.001). Fri Jun 12 21:44:37 2020
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=-4290070568L;
    public static int iFld=254;
    public float fFld=106.276F;
    public byte byFld=-23;
    public short sFld=-15583;
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static double dArrFld[]=new double[N];
    public float fArrFld[][]=new float[N][N];

    static {
        FuzzerUtils.init(Test.lArrFld, 13238851019402356L);
        FuzzerUtils.init(Test.iArrFld, -54078);
        FuzzerUtils.init(Test.dArrFld, -78.72968);
    }

    public static long vMeth_check_sum = 0;
    public static long fMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(int i1, int i2, int i3) {

        float f2=1.94F;
        int i5=-31843, i6=-191, i7=57566, i8=135;

        for (long l : Test.lArrFld) {
            f2 = f2;
        }
        for (int i4 : Test.iArrFld) {
            for (i5 = 1; i5 < 4; ++i5) {
                for (i7 = i5; i7 < 2; i7++) {
                    double d1=-1.103205;
                    i1 = (int)-1.60148;
                    d1 -= -50617;
                    if (Test.iFld != 0) {
                        vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f2) + i5 + i6 + i7 + i8;
                        return;
                    }
                    f2 *= i5;
                    Test.lArrFld = Test.lArrFld;
                    f2 = 8;
                }
                i8 += (i5 + Test.instanceCount);
                Test.instanceCount >>= Test.instanceCount;
                i4 -= (int)f2;
                i2 = (int)Test.instanceCount;
            }
        }
        vMeth1_check_sum += i1 + i2 + i3 + Float.floatToIntBits(f2) + i5 + i6 + i7 + i8;
    }

    public static float fMeth() {

        float f1=1.313F;
        int i9=8, i10=-217, i11=-27, i12=-17, i13=21823, i14=-8;
        byte by=94;

        f1 -= ((Test.instanceCount - (++Test.iFld)) - (Test.instanceCount += (long)(f1++)));
        vMeth1(Test.iFld, Test.iFld, 64065);
        for (i9 = 1; 123 > i9; ++i9) {
            for (i11 = 13; i11 > 1; i11--) {
                by = (byte)Test.instanceCount;
                Test.dArrFld[i9] = Test.instanceCount;
                for (i13 = 1; 2 > i13; i13++) {
                    Test.iFld += -199;
                    by += (byte)(i13 - i9);
                    Test.instanceCount += i13;
                    Test.iArrFld[(i14 >>> 1) % N] -= (int)Test.instanceCount;
                    try {
                        i12 = (Test.iArrFld[i11 + 1] / 1367355829);
                        i14 = (i12 / 178);
                        i12 = (53900 % i11);
                    } catch (ArithmeticException a_e) {}
                    i10 += (int)f1;
                    Test.iFld = by;
                    i10 -= 4974;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f1) + i9 + i10 + i11 + i12 + by + i13 + i14;
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public void vMeth(int i, boolean b) {

        int i15=4, i16=21344, i17=-39122, i18=-10, i19=11, i20=227;
        double d2=-16.100947;

        i += (int)(fMeth() - fFld);
        for (i15 = 382; i15 > 11; --i15) {
            i += (i15 * i15);
            fArrFld[i15 + 1][i15 - 1] += (float)d2;
            byFld -= (byte)i15;
            for (i17 = 1; i17 < 5; i17++) {
                sFld += (short)(((i17 * i) + i17) - i17);
                i18 = (int)Test.instanceCount;
                for (i19 = i15; i19 < 2; i19++) {
                    if (b) {
                        switch ((i17 % 2) + 92) {
                        case 92:
                            Test.iFld += (((i19 * Test.instanceCount) + i18) - i16);
                            fFld += (((i19 * i15) + i15) - fFld);
                            Test.instanceCount += i19;
                            fArrFld[i17 + 1][i17] = Test.iFld;
                            break;
                        case 93:
                            Test.iFld >>= 216;
                            break;
                        default:
                            sFld += (short)Test.instanceCount;
                        }
                    } else {
                        Test.iFld += i18;
                    }
                }
            }
        }
        vMeth_check_sum += i + (b ? 1 : 0) + i15 + i16 + Double.doubleToLongBits(d2) + i17 + i18 + i19 + i20;
    }

    public void mainTest(String[] strArr1) {

        double d=-1.67712;
        float f=-2.414F;
        boolean b1=true;

        Test.iFld *= (int)(d * f);
        Test.iFld += (int)(Test.instanceCount -= (++Test.iFld));
        vMeth(Test.iFld, b1);

        FuzzerUtils.out.println("d f b1 = " + Double.doubleToLongBits(d) + "," + Float.floatToIntBits(f) + "," + (b1 ?
            1 : 0));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld fFld = " + Test.instanceCount + "," + Test.iFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("byFld sFld Test.lArrFld = " + byFld + "," + sFld + "," +
            FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("Test.iArrFld Test.dArrFld fArrFld = " + FuzzerUtils.checkSum(Test.iArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 fMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
