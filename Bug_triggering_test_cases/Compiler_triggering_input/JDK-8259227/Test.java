// Generated by Java* Fuzzer test generator (1.0.001). Tue Dec 29 08:55:29 2020
public class Test {

    public static final int N = 400;

    public static long instanceCount=-188L;
    public static float fFld=0.546F;
    public static int iFld=-43582;
    public static boolean bFld=true;
    public int iFld1=2;
    public static int iFld2=62982;
    public static double dFld=-1.78116;
    public static byte byArrFld[]=new byte[N];
    public static long lArrFld[]=new long[N];
    public int iArrFld[]=new int[N];

    static {
        FuzzerUtils.init(Test.byArrFld, (byte)118);
        FuzzerUtils.init(Test.lArrFld, -7451874184577723243L);
    }

    public static long sMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long byMeth_check_sum = 0;

    public static byte byMeth() {

        int i6=12954, i7=6, i8=-3, i9=245, i10=-9, iArr[]=new int[N];
        byte by=-36;
        double d1=2.27483;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr, 246);
        FuzzerUtils.init(lArr, 4749365230390206122L);

        i6 = 1;
        while (++i6 < 208) {
            Test.iFld = Test.iFld;
            if (Test.bFld) {
                Test.iFld = (int)Test.instanceCount;
                i7 = 1;
                do {
                    Test.instanceCount <<= 36;
                    switch ((((i7 >>> 1) % 4) * 5) + 9) {
                    case 29:
                        Test.iFld += (((i7 * Test.instanceCount) + Test.fFld) - i7);
                        iArr[i7] >>>= -31;
                        by += (byte)(((i7 * Test.fFld) + i8) - Test.instanceCount);
                    case 17:
                        Test.bFld = Test.bFld;
                        break;
                    case 26:
                        if (Test.bFld) continue;
                        for (i9 = 1; i9 < 1; i9++) {
                            d1 /= (Test.iFld | 1);
                        }
                        lArr[i7 + 1] <<= Test.instanceCount;
                        break;
                    case 13:
                        Test.bFld = Test.bFld;
                        break;
                    default:
                        iArr[i7 - 1] = -58;
                    }
                } while (++i7 < 8);
            } else if (false) {
                Test.iFld += (i6 | Test.iFld);
            } else if (true) {
                Test.instanceCount += (long)Test.fFld;
            }
        }
        long meth_res = i6 + i7 + by + i8 + i9 + i10 + Double.doubleToLongBits(d1) + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(lArr);
        byMeth_check_sum += meth_res;
        return (byte)meth_res;
    }

    public static long lMeth() {

        long l1=21L;
        int i11=-8, i12=23316, i13=-107, i14=-2, i15=-63703, i16=-115, iArr1[]=new int[N], iArr2[]=new int[N];
        double d2=31.65285, dArr[]=new double[N];

        FuzzerUtils.init(iArr1, 38);
        FuzzerUtils.init(dArr, 1.30121);
        FuzzerUtils.init(iArr2, 5);

        byMeth();
        Test.iFld = -251;
        for (l1 = 6; l1 < 232; l1++) {
            if (i11 != 0) {
            }
            i12 = 1;
            do {
                iArr1[(int)(l1)] = (int)-241L;
                dArr[(int)(l1 + 1)] -= Test.fFld;
                Test.fFld -= Test.instanceCount;
            } while (++i12 < 7);
            Test.lArrFld[(int)(l1 + 1)] <<= l1;
            for (i13 = (int)(l1); i13 < 7; ++i13) {
                Test.lArrFld[(int)(l1 - 1)] = (long)d2;
                for (i15 = 1; i15 > 1; --i15) {
                    iArr2[i15] *= (int)d2;
                    iArr1[i13 - 1] = i15;
                    Test.fFld = i11;
                }
            }
        }
        long meth_res = l1 + i11 + i12 + i13 + i14 + Double.doubleToLongBits(d2) + i15 + i16 +
            FuzzerUtils.checkSum(iArr1) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) +
            FuzzerUtils.checkSum(iArr2);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public short sMeth(int i2, long l, int i3) {

        double d=-2.100041;
        int i4=203, i5=-9, i17=2, i18=-33, i19=-11, i20=-140, i21=239;
        float f1=8.931F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -1.578F);

        d += (6525 * ((Test.fFld = i2) * (i3 + i3)));
        Test.instanceCount += ((l >>>= (i3 * i2)) / ((++i3) | 1));
        i4 = 1;
        while (++i4 < 246) {
            i5 %= (int)((Test.byArrFld[i4 + 1] + ((i4 * Test.instanceCount) * Test.instanceCount)) | 1);
            i3 *= Math.min((int)(-lMeth()), i3);
            i2 += Test.iFld;
            i2 = i5;
            Test.iFld = i4;
            i2 >>>= -25;
        }
        for (i17 = 15; i17 < 287; ++i17) {
            for (f1 = 1; 6 > f1; ++f1) {
                for (i20 = 1; i20 < 2; ++i20) {
                    d = i4;
                    i18 += i20;
                    Test.fFld -= f1;
                }
            }
        }
        long meth_res = i2 + l + i3 + Double.doubleToLongBits(d) + i4 + i5 + i17 + i18 + Float.floatToIntBits(f1) + i19
            + i20 + i21 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        sMeth_check_sum += meth_res;
        return (short)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-75, i1=54547, i22=-9, i23=55535, i24=51282, i25=-6, i26=1, i27=42697, i28=30809, i29=9;
        boolean b=false, bArr[]=new boolean[N];
        byte by1=-98;

        FuzzerUtils.init(bArr, true);

        for (i = 2; i < 314; i++) {
            i1 += (i ^ Test.instanceCount);
            bArr[i - 1] = b;
            Test.instanceCount = i1;
            i1 = i;
        }
        sMeth(-9, Test.instanceCount, i);
        Test.iFld = i1;
        iArrFld[(i1 >>> 1) % N] += iFld1;
        i22 = 1;
        do {
            iFld1 += (i22 ^ i1);
            by1 |= (byte)-1937638432419819876L;
            for (i23 = 3; 92 > i23; i23++) {
                for (i25 = 1; i25 < 2; ++i25) {
                    Test.instanceCount *= Test.instanceCount;
                    i24 += (int)-56032L;
                    iFld1 = (int)Test.instanceCount;
                    i26 <<= i;
                    iFld1 = (int)Test.instanceCount;
                }
                for (i27 = 1; i27 < 2; ++i27) {
                    iArrFld = FuzzerUtils.int1array(N, (int)-201);
                }
                i29 = 1;
                do {
                    Test.byArrFld[i29 - 1] -= (byte)i1;
                    i28 |= (int)Test.instanceCount;
                    Test.iFld2 = 12;
                    i28 = iFld1;
                    Test.dFld += i;
                    iArrFld[i29] = i;
                    try {
                        i1 = (iArrFld[i29] % i24);
                        iArrFld[(i28 >>> 1) % N] = (i / i27);
                        Test.iFld2 = (57883 / i28);
                    } catch (ArithmeticException a_e) {}
                    i1 = (int)Test.instanceCount;
                } while (++i29 < 2);
                if (Test.bFld) continue;
            }
        } while (++i22 < 273);

        FuzzerUtils.out.println("i i1 b = " + i + "," + i1 + "," + (b ? 1 : 0));
        FuzzerUtils.out.println("i22 by1 i23 = " + i22 + "," + by1 + "," + i23);
        FuzzerUtils.out.println("i24 i25 i26 = " + i24 + "," + i25 + "," + i26);
        FuzzerUtils.out.println("i27 i28 i29 = " + i27 + "," + i28 + "," + i29);
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.bFld iFld1 Test.iFld2 = " + (Test.bFld ? 1 : 0) + "," + iFld1 + "," + Test.iFld2);
        FuzzerUtils.out.println("Test.dFld Test.byArrFld Test.lArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            FuzzerUtils.checkSum(Test.byArrFld) + "," + FuzzerUtils.checkSum(Test.lArrFld));
        FuzzerUtils.out.println("iArrFld = " + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("byMeth_check_sum: " + byMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("sMeth_check_sum: " + sMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  sMeth ->  sMeth mainTest
//DEBUG  lMeth ->  lMeth sMeth mainTest
//DEBUG  byMeth ->  byMeth lMeth sMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
