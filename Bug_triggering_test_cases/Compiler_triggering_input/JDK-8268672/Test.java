// Generated by Java* Fuzzer test generator (1.0.001). Sat Jun 12 18:58:40 2021
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=6L;
    public static byte byFld=83;
    public float fFld=-1.250F;
    public static short sFld=-7255;
    public static boolean bFld=true;
    public double dFld=-75.117174;
    public static int iFld=-34;
    public int iArrFld[]=new int[N];

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long vMeth2_check_sum = 0;

    public static void vMeth2() {

        int i7=-212, i8=-14, i9=-143, i10=49060, i12=40919, iArr[]=new int[N];
        float f=0.858F;
        boolean b2=false;

        FuzzerUtils.init(iArr, -202);

        i7 *= i7;
        i8 = 372;
        do {
            Test.instanceCount -= -12;
            for (i9 = 1; i9 < 5; ++i9) {
                int i11=12087;
                f = i11;
                try {
                    i11 = (727566779 % i11);
                    i10 = (iArr[i9 - 1] % i8);
                    i10 = (i8 % 42839);
                } catch (ArithmeticException a_e) {}
                if (b2) break;
                if (b2) {
                    i11 += i9;
                    i11 -= i10;
                    if (b2) continue;
                } else {
                    i12 = 1;
                    while (++i12 < 2) {
                        byte by=102;
                        iArr[i12] *= (int)Test.instanceCount;
                        i10 *= by;
                        i7 += (i12 * i12);
                    }
                }
            }
        } while (--i8 > 0);
        vMeth2_check_sum += i7 + i8 + i9 + i10 + Float.floatToIntBits(f) + (b2 ? 1 : 0) + i12 +
            FuzzerUtils.checkSum(iArr);
    }

    public static void vMeth1(int i5, int i6, boolean b1) {

        int i14=-182, i15=12, i16=-56, i17=-222, i18=-5, iArr1[]=new int[N];
        long l=5235576610920313546L, lArr1[][]=new long[N][N];
        double d=-120.22075;
        byte byArr[][]=new byte[N][N];

        FuzzerUtils.init(iArr1, 1);
        FuzzerUtils.init(byArr, (byte)-113);
        FuzzerUtils.init(lArr1, 93L);

        vMeth2();
        for (int i13 : iArr1) {
            switch (((i6 >>> 1) % 10) + 79) {
            case 79:
                byArr[(i6 >>> 1) % N][(i13 >>> 1) % N] -= (byte)2;
                break;
            case 80:
                for (i14 = 1; i14 < 4; i14++) {
                    for (l = i14; l < 2; ++l) {
                        float f1=0.662F;
                        Test.sFld -= (short)Test.instanceCount;
                        lArr1[(int)(l + 1)][i14 - 1] = Test.instanceCount;
                        f1 = i13;
                        f1 = i14;
                    }
                }
                for (i17 = 1; i17 < 4; ++i17) {
                    i16 *= 867;
                    i5 *= (int)d;
                }
                break;
            case 81:
                i6 |= -160;
                iArr1 = iArr1;
            case 82:
                Test.byFld = (byte)i14;
                break;
            case 83:
                i15 = i18;
            case 84:
                Test.instanceCount = i17;
                break;
            case 85:
                Test.instanceCount = i5;
                break;
            case 86:
                Test.instanceCount += -5389462027573553115L;
                break;
            case 87:
                iArr1[(i6 >>> 1) % N] = 241;
            case 88:
                iArr1[(i16 >>> 1) % N] -= i17;
                break;
            default:
                iArr1[(i18 >>> 1) % N] += i16;
            }
        }
        vMeth1_check_sum += i5 + i6 + (b1 ? 1 : 0) + i14 + i15 + l + i16 + i17 + i18 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(byArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i, boolean b) {

        int i1=193, i2=-153, i3=2, i4=-4, i19=6, i20=25933;
        long lArr[]=new long[N];

        FuzzerUtils.init(lArr, 30683L);

        i = (++iArrFld[(52889 >>> 1) % N]);
        iArrFld[(-9 >>> 1) % N] = Math.abs(i);
        iArrFld[(i >>> 1) % N] *= i;
        for (i1 = 4; 265 > i1; i1++) {
            lArr[i1 + 1] += (long)(i -= (int)Float.intBitsToFloat(i2 + i1));
            for (i3 = 1; i3 < 6; i3++) {
                lArr[i3 + 1] -= (iArrFld[i3] + (--Test.byFld));
                i2 += (((i3 * fFld) + Test.instanceCount) - i3);
                i4 ^= iArrFld[i1 - 1];
            }
            i += (int)Test.instanceCount;
            vMeth1(i, i3, Test.bFld);
            for (i19 = 1; i19 < 6; i19++) {
                i20 += (i19 | i1);
                Test.instanceCount = (long)fFld;
                i += i20;
            }
        }
        vMeth_check_sum += i + (b ? 1 : 0) + i1 + i2 + i3 + i4 + i19 + i20 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        int i21=-83, i22=194, i24=-10, i25=51874, i26=-247, i27=3, i28=-50545, i29=-149, i30=59147, i31=181, i32=-110;
        byte byArr1[]=new byte[N];

        FuzzerUtils.init(byArr1, (byte)-28);

        vMeth(i21, true);
        i22 = 203;
        do {
            dFld += i21;
        } while (--i22 > 0);
        Test.bFld = true;
        Test.instanceCount = Test.instanceCount;
        switch (((i22 >>> 1) % 4) + 81) {
        case 81:
            for (int i23 : iArrFld) {
                for (i24 = 3; i24 < 63; ++i24) {
                    i23 = i25;
                    dFld -= dFld;
                }
                iArrFld[(i24 >>> 1) % N] = i21;
                iArrFld[(-2 >>> 1) % N] -= i21;
                fFld *= i25;
            }
            i26 = 1;
            while (++i26 < 162) {
                if (Test.bFld) {
                    for (i27 = 9; i27 < 155; i27++) {
                        i21 += (((i27 * Test.instanceCount) + i21) - i22);
                        Test.instanceCount = Test.iFld;
                        Test.iFld = Test.byFld;
                        iArrFld[i27 - 1] <<= i22;
                        i21 -= i21;
                        fFld -= Test.instanceCount;
                    }
                    i28 = i27;
                    for (i29 = 4; 155 > i29; ++i29) {
                        Test.instanceCount += (i29 - i27);
                        for (i31 = 1; i31 < 2; i31++) {
                            Test.instanceCount = -41331L;
                            Test.instanceCount += i26;
                            i21 = i22;
                        }
                    }
                    dFld = i28;
                } else if (Test.bFld) {
                    iArrFld[i26 + 1] >>= i28;
                } else if (Test.bFld) {
                    i32 += (238 + (i26 * i26));
                } else {
                    iArrFld[i26] = i22;
                }
            }
            break;
        case 82:
            i30 = 7;
            break;
        case 83:
            Test.instanceCount += i31;
            break;
        case 84:
            Test.iFld -= (int)Test.instanceCount;
            break;
        default:
            iArrFld[(i29 >>> 1) % N] -= i28;
        }

        FuzzerUtils.out.println("i21 i22 i24 = " + i21 + "," + i22 + "," + i24);
        FuzzerUtils.out.println("i25 i26 i27 = " + i25 + "," + i26 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("i31 i32 byArr1 = " + i31 + "," + i32 + "," + FuzzerUtils.checkSum(byArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld fFld = " + Test.instanceCount + "," + Test.byFld + "," +
            Float.floatToIntBits(fFld));
        FuzzerUtils.out.println("Test.sFld Test.bFld dFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(dFld));
        FuzzerUtils.out.println("Test.iFld iArrFld = " + Test.iFld + "," + FuzzerUtils.checkSum(iArrFld));

        FuzzerUtils.out.println("vMeth2_check_sum: " + vMeth2_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  vMeth2 ->  vMeth2 vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
