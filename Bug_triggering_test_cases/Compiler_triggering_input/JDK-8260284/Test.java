// Generated by Java* Fuzzer test generator (1.0.001). Wed Jan 20 09:20:02 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=91L;
    public static volatile byte byFld=-7;
    public boolean bFld=false;
    public static boolean bFld1=false;
    public static int iFld=-5;
    public static double dArrFld[]=new double[N];
    public static byte byArrFld[]=new byte[N];
    public long lArrFld[]=new long[N];

    static {
        FuzzerUtils.init(Test.dArrFld, -1.110417);
        FuzzerUtils.init(Test.byArrFld, (byte)65);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(float f1) {

        float f2=-20.160F;
        int i6=-5, i7=21224, i8=13, iArr1[]=new int[N];
        short s=19177;
        long lArr[]=new long[N];

        FuzzerUtils.init(iArr1, -38021);
        FuzzerUtils.init(lArr, -13L);

        for (f2 = 6; f2 < 349; f2++) {
            for (i7 = 1; 5 > i7; i7++) {
                iArr1 = iArr1;
                i6 += Test.byFld;
                i6 = i7;
            }
            iArr1[(int)(f2 - 1)] += 19155;
        }
        Test.instanceCount = i7;
        switch ((((i7 >>> 1) % 2) * 5) + 99) {
        case 103:
            for (long l2 : lArr) {
                Test.dArrFld[(i8 >>> 1) % N] += i6;
                switch (((i6 >>> 1) % 1) + 37) {
                case 37:
                    Test.byArrFld[(i7 >>> 1) % N] = (byte)i7;
                    Test.instanceCount -= i8;
                    break;
                }
                l2 <<= i7;
                i8 = 91;
            }
            break;
        case 105:
            i8 += 153;
            break;
        default:
            s += (short)i7;
        }
        long meth_res = Float.floatToIntBits(f1) + Float.floatToIntBits(f2) + i6 + i7 + i8 + s +
            FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr);
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth(int i5, long l, long l1) {

        float f3=35.87F;
        int i9=4, i10=-192, i11=-157, i12=-4, i13=14024, iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -8);

        l1 *= (iMeth1(f3) - i5);
        l = i5;
        if (Test.bFld1) {
            f3 += i5;
        } else if (Test.bFld1) {
            for (i9 = 7; i9 < 243; ++i9) {
                i10 = i5;
                if (Test.bFld1) {
                    iArr2[i9] += i10;
                    if (Test.bFld1) {
                        for (i11 = 7; i11 > 1; --i11) {
                            l *= i5;
                            Test.instanceCount -= i11;
                            if (Test.bFld1) continue;
                            try {
                                i13 = (-138 / i12);
                                i12 = (6847 / i11);
                                i12 = (49 / i11);
                            } catch (ArithmeticException a_e) {}
                            l1 &= l1;
                        }
                    } else if (Test.bFld1) {
                        iArr2[i9 - 1] = (int)-8002971774448618664L;
                    } else {
                        f3 += ((long)i9 | (long)i9);
                    }
                } else if (Test.bFld1) {
                    i13 += (i9 ^ (long)f3);
                } else if (false) {
                    Test.instanceCount -= i11;
                } else {
                    i5 += (int)f3;
                }
            }
        } else {
            iArr2[(i5 >>> 1) % N] <<= i12;
        }
        long meth_res = i5 + l + l1 + Float.floatToIntBits(f3) + i9 + i10 + i11 + i12 + i13 +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i3, int i4) {

        long l3=-240L;
        float f4=2.508F;
        int i14=43707, i15=-6601, i16=8038, i17=-2, iArr3[][]=new int[N][N];

        FuzzerUtils.init(iArr3, 59823);

        i4 -= (i3 = (-iMeth(i4, l3, l3)));
        i3 -= Test.byFld;
        i4 = (int)f4;
        for (i14 = 2; i14 < 224; i14++) {
            if (Test.bFld1) break;
            i15 -= i14;
            try {
                i4 = (i15 / 20276);
                i4 = (iArr3[i14][i14 - 1] % 14759);
                iArr3[i14 + 1][i14 - 1] = (i14 % 799629335);
            } catch (ArithmeticException a_e) {}
            switch (((i14 % 7) * 5) + 108) {
            case 126:
                iArr3[i14 + 1][i14 - 1] = (int)l3;
                for (i16 = 1; i16 < 7; i16++) {
                    i15 = i17;
                    i17 += -5;
                }
                i4 += (i14 + i15);
                Test.instanceCount >>= i15;
                break;
            case 111:
                Test.bFld1 = Test.bFld1;
            case 116:
                i17 += (i14 * i14);
                break;
            case 121:
                i15 = i3;
                break;
            case 124:
                i17 += i14;
                break;
            case 115:
                iArr3[i14] = iArr3[i14 + 1];
                break;
            case 127:
                i3 += (int)l3;
            default:
                i4 -= i15;
            }
        }
        vMeth_check_sum += i3 + i4 + l3 + Float.floatToIntBits(f4) + i14 + i15 + i16 + i17 +
            FuzzerUtils.checkSum(iArr3);
    }

    public void mainTest(String[] strArr1) {

        int i=-32148, i1=246, i2=7, i18=-183, i19=-11, i20=27181, i21=-40014, i22=9220, i23=-1, i24=-8, i25=-33623,
            i26=34166, i27=-55736, i28=36426, iArr[]=new int[N];
        float f=-117.250F;
        double d=-65.6722;
        short s1=-25419;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(iArr, -41316);
        FuzzerUtils.init(bArr, true);

        i <<= (i -= ((Test.byFld - i) + i));
        Test.instanceCount /= ((long)(f) | 1);
        for (i1 = 379; i1 > 4; i1--) {
            bFld = (((Test.instanceCount - i2) + i2) != ((i = (int)Test.instanceCount) - (--iArr[i1 + 1])));
            vMeth(-55, i);
            i2 = -7;
            i2 = (int)f;
        }
        for (i18 = 4; i18 < 248; i18++) {
            for (i20 = i18; i20 < 103; ++i20) {
                if (false) {
                    for (i22 = 1; 1 > i22; i22++) {
                        bArr[i18] = Test.bFld1;
                        lArrFld[i20 + 1] >>= 9;
                        d = i19;
                    }
                    for (i24 = i18; i24 < 1; i24++) {
                        i21 += (int)199L;
                        s1 >>= (short)Test.instanceCount;
                        iArr[i20 - 1] /= (int)(Test.iFld | 1);
                        i = i22;
                        iArr[i20 + 1] -= i20;
                        i23 >>>= (int)Test.instanceCount;
                        if (true) break;
                        i -= i1;
                    }
                } else {
                    d += Test.iFld;
                    i23 /= (int)(i | 1);
                }
            }
        }
        i25 = i2;
        for (i26 = 1; 277 > i26; i26++) {
            try {
                i21 = (iArr[i26] / i);
                Test.iFld = (i28 / i);
                i28 = (i25 / -190);
            } catch (ArithmeticException a_e) {}
            if (bFld) continue;
            i19 |= i28;
        }

        FuzzerUtils.out.println("i f i1 = " + i + "," + Float.floatToIntBits(f) + "," + i1);
        FuzzerUtils.out.println("i2 i18 i19 = " + i2 + "," + i18 + "," + i19);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 d i24 = " + i23 + "," + Double.doubleToLongBits(d) + "," + i24);
        FuzzerUtils.out.println("i25 s1 i26 = " + i25 + "," + s1 + "," + i26);
        FuzzerUtils.out.println("i27 i28 iArr = " + i27 + "," + i28 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("bArr = " + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount Test.byFld bFld = " + Test.instanceCount + "," + Test.byFld + "," +
            (bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.bFld1 Test.iFld Test.dArrFld = " + (Test.bFld1 ? 1 : 0) + "," + Test.iFld + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));
        FuzzerUtils.out.println("Test.byArrFld lArrFld = " + FuzzerUtils.checkSum(Test.byArrFld) + "," +
            FuzzerUtils.checkSum(lArrFld));

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
