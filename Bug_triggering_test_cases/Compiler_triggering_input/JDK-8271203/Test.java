// Generated by Java* Fuzzer test generator (1.0.001). Thu Jul 22 12:41:23 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=718878347L;
    public static float fFld=2.989F;
    public static int iFld=67;
    public static double dFld=103.42909;
    public static boolean bFld=true;
    public static float fArrFld[]=new float[N];
    public static long lArrFld[]=new long[N];
    public static int iArrFld[]=new int[N];
    public static volatile double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 1.70F);
        FuzzerUtils.init(Test.lArrFld, 7415518467416340239L);
        FuzzerUtils.init(Test.iArrFld, 118);
        FuzzerUtils.init(Test.dArrFld, -25.41298);
    }

    public static long iMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(double d1, double d2) {

        byte by=-8;
        short s=11365, sArr[]=new short[N];
        int i6=42942, i7=150, i8=99, i9=-11, i10=-8;
        boolean b1=true;
        double dArr[]=new double[N];

        FuzzerUtils.init(dArr, -82.64658);
        FuzzerUtils.init(sArr, (short)13957);

        Test.iFld >>= by;
        s <<= s;
        Test.iFld += (int)Test.instanceCount;
        i6 = 191;
        while ((i6 -= 3) > 0) {
            switch ((i6 % 2) + 42) {
            case 42:
                Test.fFld %= (Test.iFld | 1);
                break;
            case 43:
                Test.iFld -= (int)0L;
                dArr[i6] += i6;
                if (b1) continue;
                break;
            }
            Test.fFld = i7;
            Test.instanceCount = Test.iFld;
            d2 = i6;
            i8 = 1;
            do {
                for (i9 = 1; i9 < 1; i9++) {
                    switch ((i9 % 9) + 99) {
                    case 99:
                        Test.instanceCount += i9;
                        i10 += (i9 - i10);
                        i10 = (int)Test.fFld;
                        if (b1) break;
                        try {
                            Test.iFld = (Test.iFld % Test.iFld);
                            i10 = (717909948 % i7);
                            i7 = (i10 % 100);
                        } catch (ArithmeticException a_e) {}
                    case 100:
                        i7 = (int)Test.instanceCount;
                        break;
                    case 101:
                        Test.instanceCount %= ((long)(Test.fFld) | 1);
                        break;
                    case 102:
                        Test.lArrFld[i6] *= (long)Test.fFld;
                    case 103:
                        sArr[i8] -= (short)Test.iFld;
                    case 104:
                        Test.fFld += Test.iFld;
                        break;
                    case 105:
                        Test.iFld = Test.iFld;
                        break;
                    case 106:
                        by *= (byte)d2;
                        break;
                    case 107:
                        Test.iFld = s;
                        break;
                    }
                }
            } while (++i8 < 24);
        }
        vMeth1_check_sum += Double.doubleToLongBits(d1) + Double.doubleToLongBits(d2) + by + s + i6 + (b1 ? 1 : 0) + i7
            + i8 + i9 + i10 + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)) + FuzzerUtils.checkSum(sArr);
    }

    public static void vMeth(double d, boolean b) {

        int i11=-12, i12=-46468, i13=-32996, i14=-61548, i15=-31772, i16=30363, i17=-7;

        Test.iFld = (-(--Test.iFld));
        vMeth1(d, 0.12993);
        Test.iFld = (int)-58260L;
        Test.iFld = Test.iFld;
        i11 = 1;
        do {
            Test.fFld = i11;
            if (b) {
                for (i12 = 1; i12 < 5; ++i12) {
                    i13 += i12;
                    for (i14 = 1; i14 < 2; i14++) {
                        i13 = Test.iFld;
                        if (b) continue;
                    }
                }
                Test.fFld = 144L;
                Test.instanceCount = (long)Test.fFld;
            }
            for (i16 = 1; i16 < 5; i16++) {
                Test.instanceCount += (long)Test.fFld;
                Test.lArrFld[i16] = i17;
                i15 = (int)Test.instanceCount;
                try {
                    i13 = (i15 % -39);
                    i13 = (i12 / -1667725740);
                    i15 = (-40418 % Test.iFld);
                } catch (ArithmeticException a_e) {}
                Test.fFld = -36641L;
            }
        } while (++i11 < 326);
        vMeth_check_sum += Double.doubleToLongBits(d) + (b ? 1 : 0) + i11 + i12 + i13 + i14 + i15 + i16 + i17;
    }

    public static int iMeth1(long l, int i4, int i5) {

        boolean b2=false;
        int i18=14, i19=-23777, i20=75, i21=39836, i22=-8, i23=5359;

        vMeth(Test.dFld, b2);
        l -= i5;
        l = Test.iFld;
        for (i18 = 225; i18 > 9; --i18) {
            l += i18;
            Test.instanceCount += (11421 + (i18 * i18));
            if (false) {
                for (i20 = i18; 7 > i20; i20++) {
                    Test.fFld = 77.156F;
                    Test.fFld += i20;
                    Test.instanceCount += (((i20 * i18) + i18) - i21);
                    Test.lArrFld[i18 - 1] -= l;
                    i4 = -9;
                }
                for (i22 = 1; i22 < 7; ++i22) {
                    i19 = i4;
                    l -= i5;
                }
                Test.iArrFld = Test.iArrFld;
                if (i4 != 0) {
                }
            } else if (b2) {
                Test.fFld += l;
                Test.dArrFld[i18 + 1] = i20;
            } else {
                Test.dFld = Test.iFld;
            }
        }
        long meth_res = l + i4 + i5 + (b2 ? 1 : 0) + i18 + i19 + i20 + i21 + i22 + i23;
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static int iMeth() {

        int i3=11713;

        Test.fFld = Test.instanceCount;
        Test.lArrFld[(i3 >>> 1) % N] = iMeth1(Test.instanceCount, Test.iFld, i3);
        i3 = i3;
        long meth_res = i3;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=56, i1=-6, i2=28257, i24=-39888, i25=-10, i26=145, i27=44101, i29=10, i30=140, i31=-10;
        float f1=60.581F;
        byte by1=43, byArr[]=new byte[N];
        long l1=210L, l2=52540L, l3=37373L, lArr[]=new long[N];
        short s1=8989;
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(lArr, 1382822322603598528L);
        FuzzerUtils.init(bArr, true);
        FuzzerUtils.init(byArr, (byte)110);

        i = 129;
        do {
            i1 += (int)(1.250F + (i * i));
            i2 = 194;
            do {
                float f=0.466F;
                Test.fArrFld[i + 1] -= (((-64737L * (i / 3364230937L)) + (i2 * i2)) >>> ((i2 - i1) << (long)(i1 + f)));
                lArr[i2 + 1] = iMeth();
                i24 = 1;
                while (++i24 < 2) {
                    f1 = i1;
                    by1 = (byte)243;
                    bArr[i24 - 1] = Test.bFld;
                }
                for (l1 = i; l1 < 2; ++l1) {
                    Test.iFld = i;
                    lArr[i] = Test.instanceCount;
                    Test.instanceCount += (25839L + (l1 * l1));
                    Test.instanceCount -= i2;
                    Test.instanceCount |= i2;
                    Test.iArrFld[(int)(l1 + 1)] += Test.iFld;
                    lArr[i2] = l1;
                }
                for (l2 = i2; l2 < 2; l2++) {
                    try {
                        i1 = (-729620339 % i);
                        Test.iArrFld[(int)(l2)] = (47 % Test.iArrFld[i]);
                        i26 = (i24 / -23183);
                    } catch (ArithmeticException a_e) {}
                }
                i27 = 1;
                do {
                    Test.iFld = i26;
                } while (++i27 < 2);
                Test.fFld += Test.instanceCount;
                Test.dArrFld[i2 + 1] -= by1;
                Test.fFld = 11L;
                Test.instanceCount *= i27;
                i25 += (i2 * i2);
            } while ((i2 -= 2) > 0);
            Test.instanceCount <<= i;
            Test.iFld >>= i27;
            Test.dArrFld[i + 1] += i;
            i1 -= (int)31267L;
            byArr[i + 1] = (byte)216;
            Test.instanceCount += Test.iFld;
            for (l3 = 8; l3 < 194; ++l3) {
                for (i30 = 1; i30 < 2; ++i30) {
                    switch (((i % 10) * 5) + 101) {
                    case 149:
                        byArr = byArr;
                        i1 = 26;
                        i26 += (((i30 * Test.fFld) + i29) - l1);
                        i29 += (i30 | i29);
                        break;
                    case 130:
                        Test.iArrFld[i30] = (int)Test.dFld;
                        break;
                    case 111:
                    case 119:
                        try {
                            i31 = (i24 / i2);
                            i25 = (i31 / i29);
                            i1 = (88 / i26);
                        } catch (ArithmeticException a_e) {}
                        break;
                    case 147:
                        if (Test.bFld) break;
                    case 139:
                        s1 -= (short)i1;
                        break;
                    case 134:
                        Test.bFld = true;
                    case 108:
                    case 140:
                    case 137:
                        i31 /= 182;
                        break;
                    default:
                        Test.fArrFld[i30 + 1] = l2;
                    }
                }
            }
        } while (--i > 0);

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i24 f1 by1 = " + i24 + "," + Float.floatToIntBits(f1) + "," + by1);
        FuzzerUtils.out.println("l1 i25 l2 = " + l1 + "," + i25 + "," + l2);
        FuzzerUtils.out.println("i26 i27 l3 = " + i26 + "," + i27 + "," + l3);
        FuzzerUtils.out.println("i29 i30 i31 = " + i29 + "," + i30 + "," + i31);
        FuzzerUtils.out.println("s1 lArr bArr = " + s1 + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(bArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(Test.fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld Test.bFld Test.fArrFld = " + Double.doubleToLongBits(Test.dFld) + "," +
            (Test.bFld ? 1 : 0) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));
        FuzzerUtils.out.println("Test.lArrFld Test.iArrFld Test.dArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + FuzzerUtils.checkSum(Test.iArrFld) + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth1 iMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth iMeth1 iMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}
