// Generated by Java* Fuzzer test generator (1.0.001). Thu Feb  4 18:41:14 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=-11L;
    public static int iFld=10;
    public static boolean bFld=false;
    public byte byFld=-123;
    public static short sFld=32661;
    public static int iArrFld[]=new int[N];
    public boolean bArrFld[]=new boolean[N];
    public float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 0);
    }

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long fMeth_check_sum = 0;

    public static float fMeth(long l) {

        double d1=10.37979;

        d1 = Test.iFld;
        long meth_res = l + Double.doubleToLongBits(d1);
        fMeth_check_sum += meth_res;
        return (float)meth_res;
    }

    public static void vMeth1() {

        float f=-1.556F;
        short s=13871;
        long l1=1121505463L;
        int i4=-196, i5=237, i6=4850, i7=-165, i8=-12;
        double d2=16.101546;

        Test.iFld += (int)(Math.abs((int)(Test.iArrFld[(Test.iFld >>> 1) % N] -= (int)f)) * (fMeth(-41119L) - s));
        for (l1 = 371; 18 < l1; --l1) {
            for (i5 = (int)(l1); 5 > i5; i5++) {
                i7 = 1;
                while (--i7 > 0) {
                    Test.iFld = -45586;
                    f += -5243700469067670241L;
                    i4 = i7;
                }
            }
        }
        Test.iFld = i5;
        Test.instanceCount -= (long)d2;
        i8 = 1;
        do {
            if (i8 != 0) {
                vMeth1_check_sum += Float.floatToIntBits(f) + s + l1 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d2)
                    + i8;
                return;
            }
            Test.instanceCount = -74;
            Test.instanceCount -= (long)-99.965;
            i6 = i8;
            i6 = i5;
        } while (++i8 < 327);
        vMeth1_check_sum += Float.floatToIntBits(f) + s + l1 + i4 + i5 + i6 + i7 + Double.doubleToLongBits(d2) + i8;
    }

    public static void vMeth(double d) {

        int i9=-27766, i10=2, i11=12, i12=-7, i13=245;
        float f1=1.59F;

        vMeth1();
        Test.iFld = Test.iFld;
        for (i9 = 9; i9 < 252; ++i9) {
            i10 *= Test.iFld;
            f1 = i10;
            Test.iFld += (int)Test.instanceCount;
            for (i11 = 1; 7 > i11; i11++) {
                Test.iFld *= (int)5557814831763514966L;
                if (Test.bFld) {
                    i10 *= (int)f1;
                    i13 = 1;
                    do {
                        Test.iArrFld[(i9 >>> 1) % N] -= (int)d;
                        Test.instanceCount += (i13 * i13);
                        i12 += (i13 ^ Test.iFld);
                        i10 = Test.iFld;
                    } while (++i13 < 2);
                } else if (Test.bFld) {
                    Test.instanceCount = i13;
                } else if (Test.bFld) {
                    Test.iFld = (int)Test.instanceCount;
                }
            }
        }
        vMeth_check_sum += Double.doubleToLongBits(d) + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13;
    }

    public void mainTest(String[] strArr1) {

        int i=-127, i1=-224, i2=-47396, i3=-24610, i14=3, i15=-10043, i16=-199, i17=-25014;
        double d3=32.66363, dArr[]=new double[N];
        float f2=-39.771F;

        FuzzerUtils.init(dArr, 0.104037);

        for (i = 183; i > 9; i--) {
            for (i2 = i; 144 > i2; i2++) {
                i3 *= Test.iArrFld[i2];
                Test.iArrFld[i2] = (int)(Test.instanceCount++);
            }
            vMeth(d3);
            for (i14 = 2; 144 > i14; i14++) {
                Test.iFld += i3;
                i1 = 123;
                switch (((i14 % 2) * 5) + 71) {
                case 78:
                case 75:
                    for (i16 = 1; i16 < 2; ++i16) {
                        byFld += (byte)i16;
                        Test.instanceCount = i17;
                        if (Test.bFld) break;
                        f2 *= -1.89F;
                        switch (((i16 % 3) * 5) + 90) {
                        case 98:
                            f2 = byFld;
                            i15 = i;
                            break;
                        case 91:
                            i1 <<= i14;
                            Test.iArrFld[(Test.iFld >>> 1) % N] <<= byFld;
                            break;
                        case 92:
                            byFld = (byte)i14;
                            Test.instanceCount = i1;
                            d3 = i;
                            switch ((i14 % 7) + 98) {
                            case 98:
                                d3 -= i;
                                bArrFld[i] = Test.bFld;
                                break;
                            case 99:
                                i3 += (int)Test.instanceCount;
                                dArr[i14] -= i16;
                                Test.iArrFld[i16] |= (int)Test.instanceCount;
                                break;
                            case 100:
                                Test.sFld -= (short)-6;
                                f2 -= f2;
                            case 101:
                                i1 = (int)-2.355F;
                                break;
                            case 102:
                                i15 = (int)Test.instanceCount;
                                break;
                            case 103:
                                fArrFld[i + 1] -= i14;
                            case 104:
                                i15 >>= i17;
                                break;
                            default:
                                if (Test.bFld) break;
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        }

        FuzzerUtils.out.println("i i1 i2 = " + i + "," + i1 + "," + i2);
        FuzzerUtils.out.println("i3 d3 i14 = " + i3 + "," + Double.doubleToLongBits(d3) + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("f2 dArr = " + Float.floatToIntBits(f2) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.bFld = " + Test.instanceCount + "," + Test.iFld +
            "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("byFld Test.sFld Test.iArrFld = " + byFld + "," + Test.sFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("bArrFld fArrFld = " + FuzzerUtils.checkSum(bArrFld) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArrFld)));

        FuzzerUtils.out.println("fMeth_check_sum: " + fMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  fMeth ->  fMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
