// Generated by Java* Fuzzer test generator (1.0.001). Thu Aug 22 06:55:43 2019
public class Test {

    public static final int N = 400;

    public static long instanceCount=2828504786L;
    public static int iFld=95;
    public static float fFld=-94.400F;
    public static short sFld=-12108;
    public static byte byFld=86;
    public static int iArrFld[]=new int[N];
    public static volatile short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -6);
        FuzzerUtils.init(Test.sArrFld, (short)4656);
    }

    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth(int i8, double d) {

        byte by=2;
        int i9=1778, i10=-24239, i11=12, i12=-7;
        float fArr[]=new float[N];

        FuzzerUtils.init(fArr, -63.323F);

        fArr = FuzzerUtils.float1array(N, (float)0.691F);
        i8 -= 203;
        Test.iArrFld[(12 >>> 1) % N] = by;
        by |= (byte)Test.iFld;
        for (i9 = 4; i9 < 280; ++i9) {
            Test.iFld += (i9 - Test.iFld);
            Test.iFld = -54723;
            switch ((i9 % 10) + 69) {
            case 69:
            case 70:
                Test.fFld -= Test.instanceCount;
                i8 = Test.iFld;
                for (i11 = 1; i11 < 6; i11++) {
                    i8 += (((i11 * Test.iFld) + Test.instanceCount) - Test.iFld);
                    i12 += (((i11 * Test.iFld) + Test.fFld) - i8);
                    d *= i12;
                    i8 *= (int)1.33906;
                }
                break;
            case 71:
                if (Test.iFld != 0) {
                }
                break;
            case 72:
                i12 <<= i10;
                break;
            case 73:
                i12 += (((i9 * Test.iFld) + Test.instanceCount) - i11);
                break;
            case 74:
                by -= (byte)Test.instanceCount;
                break;
            case 75:
                by += (byte)d;
                break;
            case 76:
                Test.iArrFld[i9] += i10;
                break;
            case 77:
                Test.instanceCount += i12;
            case 78:
                fArr = fArr;
                break;
            }
        }
        long meth_res = i8 + Double.doubleToLongBits(d) + by + i9 + i10 + i11 + i12 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth() {

        long l=5L;
        int i7=164, i13=11, i14=125;
        byte by1=-7;
        boolean b=true;
        double d1=-6.40592;

        Test.instanceCount = (long)(++Test.fFld);
        for (l = 7; 331 > l; l++) {
            switch ((int)(((l % 2) * 5) + 81)) {
            case 86:
                Test.iFld ^= iMeth(i7, 54.62217);
                Test.iFld -= Test.iFld;
                Test.iFld *= (int)Test.instanceCount;
                switch ((int)((l % 7) + 123)) {
                case 123:
                    by1 |= (byte)i7;
                    break;
                case 124:
                    i13 = 1;
                    do {
                        i14 = 1;
                        while (++i14 < 1) {
                            Test.iFld = i14;
                            try {
                                Test.iFld = (Test.iArrFld[i14 - 1] % -1775967819);
                                Test.iFld = (Test.iArrFld[(int)(l - 1)] % -28335);
                                Test.iArrFld[(int)(l + 1)] = (i7 % 254);
                            } catch (ArithmeticException a_e) {}
                            i7 = i7;
                            Test.fFld *= i14;
                        }
                        if (b) continue;
                    } while (++i13 < 5);
                    break;
                case 125:
                    Test.fFld -= -3;
                    break;
                case 126:
                    try {
                        Test.iFld = (i7 / -3910);
                        Test.iArrFld[(int)(l - 1)] = (Test.iFld % Test.iFld);
                        Test.iArrFld[(int)(l)] = (2065456685 % i7);
                    } catch (ArithmeticException a_e) {}
                    break;
                case 127:
                    i7 += (int)d1;
                    break;
                case 128:
                    Test.sFld = (short)i13;
                    break;
                case 129:
                    if (i14 != 0) {
                    }
                    break;
                default:
                    Test.fFld -= (float)d1;
                }
                break;
            case 88:
                Test.fFld += Test.instanceCount;
                break;
            }
        }
        long meth_res = l + i7 + by1 + i13 + i14 + (b ? 1 : 0) + Double.doubleToLongBits(d1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth() {

        int i2=117, i3=-14, i4=12, i5=-198, i6=40316, i15=-54638, i16=147;
        long l1=2634719358L;

        i2 = 1;
        do {
            for (i3 = 1; i3 < 5; ++i3) {
                i4 >>= i3;
                for (i5 = 2; 1 < i5; --i5) {
                    float f=0.880F;
                    double d2=-30.64893;
                    if (((lMeth() / (i6 | 1)) + i6) != Test.iFld) {
                        i6 -= (int)(((--i4) * (f--)) - (++Test.iFld));
                        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + l1 + i15 + i16;
                        return;
                    } else {
                        i6 += (i5 ^ i2);
                        Test.fFld -= (float)d2;
                    }
                    i6 *= (int)Test.instanceCount;
                    Test.sArrFld[i2] += (short)Test.instanceCount;
                    l1 -= l1;
                }
            }
            Test.iFld = i5;
            for (i15 = 1; i15 < 5; ++i15) {
                Test.iArrFld[i15] = 5;
                if (i2 != 0) {
                    vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + l1 + i15 + i16;
                    return;
                }
            }
        } while (++i2 < 301);
        vMeth_check_sum += i2 + i3 + i4 + i5 + i6 + l1 + i15 + i16;
    }

    public void mainTest(String[] strArr1) {

        int i=30363, i1=9, i17=-38521, i18=6, i19=14, i20=-10957;
        float f1=-6.452F, fArr1[]=new float[N];
        long l2=-161672311649449102L;
        boolean b1=false;
        double d3=-28.127276;

        FuzzerUtils.init(fArr1, 0.355F);

        for (i = 8; 178 > i; ++i) {
            vMeth();
            for (i17 = 4; 148 > i17; ++i17) {
                Test.byFld = (byte)Test.iFld;
                Test.instanceCount = -85;
                f1 = 1;
                while (++f1 < 2) {
                    switch ((i17 % 1) + 115) {
                    case 115:
                    default:
                        Test.instanceCount += i1;
                    }
                    i1 -= (int)2.244F;
                    Test.instanceCount = Test.instanceCount;
                }
                for (l2 = 1; l2 < 2; l2++) {
                    if (b1) break;
                    i1 += (int)(l2 * Test.instanceCount);
                    try {
                        i1 = (Test.iArrFld[i17] % i19);
                        i1 = (-61727 % i);
                        i1 = (-226 % Test.iArrFld[i17 + 1]);
                    } catch (ArithmeticException a_e) {}
                    i1 += (int)(l2 + i17);
                    Test.instanceCount += (((l2 * Test.instanceCount) + i19) - Test.iFld);
                    d3 = d3;
                    Test.iFld *= i1;
                    Test.byFld <<= (byte)i18;
                    Test.iArrFld[i17] -= i20;
                    i18 = i;
                }
                i20 = i19;
            }
            Test.instanceCount -= i1;
            fArr1 = fArr1;
            if (b1) {
                Test.iArrFld[i] /= (int)((long)(f1) | 1);
            } else {
                Test.fFld = l2;
                Test.iFld -= Test.byFld;
                i1 += (i * i);
                i19 = (int)l2;
            }
        }

        FuzzerUtils.out.println("i i1 i17 = " + i + "," + i1 + "," + i17);
        FuzzerUtils.out.println("i18 f1 l2 = " + i18 + "," + Float.floatToIntBits(f1) + "," + l2);
        FuzzerUtils.out.println("i19 b1 d3 = " + i19 + "," + (b1 ? 1 : 0) + "," + Double.doubleToLongBits(d3));
        FuzzerUtils.out.println("i20 fArr1 = " + i20 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1)));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.fFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.sFld Test.byFld Test.iArrFld = " + Test.sFld + "," + Test.byFld + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
