// Generated by Java* Fuzzer test generator (1.0.001). Fri Aug 30 14:19:25 2019
public class Test {

    public static final int N = 400;

public Test setinstanceCount(long tmp) { Test.instanceCount = tmp; return this; };
public Test setfArrFld(float tmp[]) { Test.fArrFld = tmp; return this; };
public Test setiArrFld(int tmp[][]) { Test.iArrFld = tmp; return this; };
public Test setdArrFld(double tmp[]) { Test.dArrFld = tmp; return this; };
public Test setOFld(Cls1 tmp) { Test.OFld = tmp; return this; };
    public static long instanceCount=-47320L;
    public static float fArrFld[]=new float[N];
    public static int iArrFld[][]=new int[N][N];
    public static double dArrFld[]=new double[N];
    public static Cls1 OFld=new Cls1();

    static {
        FuzzerUtils.init(Test.fArrFld, 0.699F);
        FuzzerUtils.init(Test.iArrFld, -138);
        FuzzerUtils.init(Test.dArrFld, 102.101794);
    }

    public void mainTest(String[] strArr1) {

        int i=14, i1=3, i3=-219, i4=-6, i10=107, i11=126, i12=-97;
        float f=2.150F;
        double d1=0.94766;

        i = 1;
        do {
            long l=-161L;
            i1 = 1;
            do {
                int i2=-3;
                i2 += (((i1 * i1) + i1) - Test.instanceCount);
            } while (++i1 < 142);
            for (i3 = i; i3 < 142; ++i3) {
                Test.OFld = Test.OFld.setOFld1(Test.OFld.OFld1.setfFld((float)(Test.OFld.OFld1.fFld+(float)((((i3 * i4)
                    + i) - i4))))); /* Test.OFld.OFld1.fFld += (((i3 * i4) + i) - i4) */ ;
                Cls1.vMeth();
            }
            Test.fArrFld[i] -= Cls1.instanceCount;
            Test.iArrFld[i - 1][i + 1] += Cls1.sFld;
            switch (((i4 >>> 1) % 3) + 54) {
            case 54:
                Test.iArrFld[i][i - 1] >>>= i;
                break;
            case 55:
                Test.instanceCount -= Cls.instanceCount;
                for (i10 = 3; i10 < 142; i10++) {
                    Test.iArrFld[i][i10] ^= i;
                    if (Cls1.bFld) break;
                    Test.iArrFld[i - 1] = FuzzerUtils.int1array(N, (int)-120);
                    Test.OFld = Test.OFld.setOFld1(Test.OFld.OFld1.setfFld((float)((float)i1))); /*
                        Test.OFld.OFld1.fFld = i1 */ ;
                }
                i11 += (i * Cls.instanceCount);
                break;
            case 56:
                for (f = 142; f > i; f--) {
                    Cls1.dFld += i10;
                    Cls1.dFld -= i12;
                    Cls1.dFld -= Cls1.instanceCount;
                    Test.dArrFld[i + 1] += i10;
                }
                i11 += (((i * i4) + Test.OFld.OFld1.fFld) - i4);
                break;
            }
            Test.instanceCount += (i | i12);
            i11 += (((i * Test.instanceCount) + l) - Cls.instanceCount);
            d1 = 1;
            while (++d1 < 142) {
                i4 = i;
                Test.iArrFld[(i12 >>> 1) % N][i + 1] = i1;
                Test.instanceCount += 159L;
                Test.OFld = Test.OFld.setiFld1((int)((int)Cls.instanceCount)); /* Test.OFld.iFld1 =
                    (int)Cls.instanceCount */ ;
            }
        } while (++i < 177);

        FuzzerUtils.out.println("i i1 i3 = " + i + "," + i1 + "," + i3);
        FuzzerUtils.out.println("i4 Test.OFld.OFld1.fFld i10 = " + i4 + "," +
            Float.floatToIntBits(Test.OFld.OFld1.fFld) + "," + i10);
        FuzzerUtils.out.println("i11 f i12 = " + i11 + "," + Float.floatToIntBits(f) + "," + i12);
        FuzzerUtils.out.println("d1 Test.OFld.iFld1 Test.OFld.OFld1 = " + Double.doubleToLongBits(d1) + "," +
            Test.OFld.iFld1 + "," + FuzzerUtils.checkSum(Test.OFld.OFld1));
        FuzzerUtils.out.println("Cls Cls1 = " + Cls.instanceCount + "," + Cls1.instanceCount);

        FuzzerUtils.out.println("Test.instanceCount Test.fArrFld Test.iArrFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)) + "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.dArrFld Test.OFld Cls = " +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," + FuzzerUtils.checkSum(Test.OFld) + "," +
            Cls.instanceCount);
        FuzzerUtils.out.println("Cls1 = " + Cls1.instanceCount);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
inline class Cls {

    public static final int N = 400;

public Cls setinstanceCount(long tmp) { Cls.instanceCount = tmp; return this; };
public Cls setfFld(float tmp) { return __WithField(fFld, tmp); };
public Cls setiFld(int tmp) { return __WithField(iFld, tmp); };
    public static long instanceCount=-98L;
    public float fFld=-1.807F;
    public int iFld=-228;

}
///////////////////////////////////////////////////////////////////////
inline class Cls1 {

    public static final int N = 400;

public Cls1 setinstanceCount(long tmp) { Cls1.instanceCount = tmp; return this; };
public Cls1 setsFld(short tmp) { Cls1.sFld = tmp; return this; };
public Cls1 setbFld(boolean tmp) { Cls1.bFld = tmp; return this; };
public Cls1 setdFld(double tmp) { Cls1.dFld = tmp; return this; };
public Cls1 setfFld1(float tmp) { return __WithField(fFld1, tmp); };
public Cls1 setiFld1(int tmp) { return __WithField(iFld1, tmp); };
public Cls1 setlArrFld(long tmp[]) { Cls1.lArrFld = tmp; return this; };
public Cls1 setOFld1(Cls tmp) { return __WithField(OFld1, tmp); };
public Cls1 setOFld2(Cls tmp) { return __WithField(OFld2, tmp); };
    public static long instanceCount=1713384832461819506L;
    public static short sFld=20606;
    public static boolean bFld=false;
    public static double dFld=-2.79593;
    public float fFld1=83.469F;
    public int iFld1=-51;
    public static long lArrFld[]=new long[N];
    public Cls OFld1=new Cls();
    public Cls OFld2=new Cls();

    static {
        FuzzerUtils.init(Cls1.lArrFld, -2872311818L);
    }

    public static long vMeth_check_sum = 0;

    public static void vMeth() {

        int i5=26432, i6=-27110, i7=-13, i8=-70, i9=-107;

        Cls1.lArrFld[(Test.OFld.OFld2.iFld >>> 1) % N] += Test.OFld.OFld2.iFld;
        i5 = 1;
        while (++i5 < 233) {
            for (i6 = 1; 7 > i6; i6++) {
                i7 += -181;
                Cls1.sFld += (short)(i6 - Test.OFld.OFld2.iFld);
                Test.OFld = Test.OFld.setOFld2(Test.OFld.OFld2.setiFld((int)(Test.OFld.OFld2.iFld<<(int)(i7)))); /*
                    Test.OFld.OFld2.iFld <<= i7 */ ;
                Test.OFld = Test.OFld.setOFld2(Test.OFld.OFld2.setiFld((int)(Test.OFld.OFld2.iFld-(int)(i6)))); /*
                    Test.OFld.OFld2.iFld -= i6 */ ;
                for (i8 = i5; i8 < 2; i8++) {
                    double d=16.61590;
                    Cls1.lArrFld[i8] *= (long)d;
                    if (Cls1.bFld) break;
                }
                i9 += (i6 + i9);
                i7 -= Cls1.sFld;
            }
            i9 = i6;
            Cls1.dFld += Test.OFld.fFld1;
            i7 += i5;
        }
        vMeth_check_sum += Test.OFld.OFld2.iFld + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(Test.OFld.fFld1) +
            FuzzerUtils.checkSum(Test.OFld.OFld2);
    }

}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  Cls ->  Cls Cls1 Test mainTest vMeth
//DEBUG  Cls1 ->  Cls1 Test mainTest vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 3
//DEBUG  static objects = {Cls1: [, Test.OFld], Cls: [], }
