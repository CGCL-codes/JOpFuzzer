// Generated by Java* Fuzzer test generator (1.0.001). Tue Jun 15 02:53:20 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=47540L;
    public int iFld=-41658;
    public static float fFld=95.926F;
    public static byte byFld=-115;
    public static double dFld=0.15667;
    public static int iFld1=4;
    public static short sFld=5587;
    public static volatile boolean bFld=true;
    public static volatile int iArrFld[]=new int[N];
    public static short sArrFld[]=new short[N];

    static {
        FuzzerUtils.init(Test.iArrFld, 11);
        FuzzerUtils.init(Test.sArrFld, (short)-26197);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static void vSmallMeth(long l, long l1, int i) {


        i >>= (int)(i * (--l));
        vSmallMeth_check_sum += l + l1 + i;
    }

    public static int iMeth(int i12) {

        int i13=47892, i14=222, i15=10936, i16=140, i17=22, i18=0, i19=-9, i20=-37793, i21=-40, i22=-9511;

        for (i13 = 339; i13 > 3; i13 -= 2) {
            for (i15 = 1; i15 < 9; i15++) {
                Test.byFld += (byte)Test.dFld;
                for (i17 = 1; i17 < 2; ++i17) {
                    try {
                        i19 = (Test.iArrFld[i15 + 1] / Test.iFld1);
                        i14 = (i16 % 48675);
                        Test.iArrFld[i13] = (Test.iArrFld[(i15 >>> 1) % N] % -1168834643);
                    } catch (ArithmeticException a_e) {}
                }
                for (i20 = 1; i20 < 2; ++i20) {
                    i18 = i18;
                    Test.iArrFld = Test.iArrFld;
                    Test.instanceCount = -44516;
                    Test.instanceCount -= i16;
                    Test.sFld = (short)Test.instanceCount;
                    Test.instanceCount += (80 + (i20 * i20));
                    Test.dFld = i12;
                    i12 ^= (int)-28L;
                }
                i22 = i19;
            }
        }
        long meth_res = i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22;
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static long lMeth(int i9, int i10) {

        int i11=-62065, i23=37, i24=12, i25=62500, i26=-49383, i27=-11164, i28=-9;
        double d=123.123513;

        i11 = 1;
        while (++i11 < 259) {
            i10 += (i11 * i11);
            Test.instanceCount += iMeth(i10);
        }
        try {
            for (i23 = 11; i23 < 265; ++i23) {
                i9 >>>= i25;
                i9 += i23;
                for (i26 = i23; i26 < 6; ++i26) {
                    Test.iArrFld[i23] *= 100;
                    Test.iArrFld[i26 + 1] = (int)Test.fFld;
                    i24 = i27;
                    i24 += 22362;
                    for (d = 1; d < 1; d++) {
                        i27 = -125;
                        Test.instanceCount += 13;
                    }
                }
            }
        }
        catch (UserDefinedExceptionTest exc1) {
            Test.iArrFld[(i24 >>> 1) % N] %= -211;
        }
        finally {
            Test.instanceCount >>= Test.iFld1;
        }
        long meth_res = i9 + i10 + i11 + i23 + i24 + i25 + i26 + i27 + Double.doubleToLongBits(d) + i28;
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static void vMeth(int i1, int i2) {

        int i3=-27774, i4=9, i5=2, i6=12, i7=0, i8=-4, i29=53186;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(lArr, 44929L);

        vSmallMeth(Math.min(Test.instanceCount, lArr[(i2 >>> 1) % N][(54 >>> 1) % N]), Test.instanceCount++, i1);
        Test.iArrFld[(i2 >>> 1) % N] |= ((-i1) - ((i2 / 121) + (i1 * -3)));
        lArr[(i1 >>> 1) % N][(26485 >>> 1) % N] = Test.instanceCount;
        for (i3 = 4; i3 < 336; ++i3) {
            for (i5 = 1; i5 < 5; ++i5) {
                for (i7 = 1; i7 < 2; i7++) {
                    switch (((i3 % 9) * 5) + 53) {
                    case 91:
                        Test.instanceCount = (long)(Test.fFld = (++Test.fFld));
                        i8 -= (int)(((~lMeth(i6, i1)) + i3) - -56632);
                        Test.iFld1 = (int)Test.dFld;
                        Test.instanceCount = -20080;
                        break;
                    case 87:
                        i2 += i7;
                        break;
                    case 66:
                        Test.iArrFld[i7] >>= i7;
                        i4 ^= 14;
                        break;
                    case 79:
                        Test.iFld1 += (((i7 * i2) + i5) - i1);
                    case 80:
                        i1 >>>= 60505;
                        break;
                    case 98:
                        i8 /= 64920;
                    case 81:
                        Test.byFld -= Test.byFld;
                        break;
                    case 64:
                        i6 = -130;
                        break;
                    case 58:
                        i29 = i7;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i29 + FuzzerUtils.checkSum(lArr);
    }

    public void mainTest(String[] strArr1) {

        short s=838;
        int i31=238, i32=-19630, i33=-1, i34=181, i35=155, i36=-8401, i37=-50, i38=-153, iArr[][]=new int[N][N];
        float f1=46.763F, fArr[]=new float[N];
        byte byArr[]=new byte[N];
        boolean bArr[]=new boolean[N];

        FuzzerUtils.init(fArr, -59.7F);
        FuzzerUtils.init(byArr, (byte)63);
        FuzzerUtils.init(iArr, 39165);
        FuzzerUtils.init(bArr, true);

        for (float f : fArr) {
            for (int smallinvoc=0; smallinvoc<62; smallinvoc++) vSmallMeth(Test.instanceCount = ((Test.instanceCount++)
                * 65430), ((iFld + iFld) * (iFld++)) + (iFld + (iFld + iFld)), -s);
        }
        Test.instanceCount |= -2906416119L;
        for (byte by : byArr) {
            iArr[(iFld >>> 1) % N][(iFld >>> 1) % N] = (iFld--);
            vMeth(iFld, -8);
            iFld |= (int)Test.instanceCount;
            i31 = 1;
            do {
                Test.sFld -= (short)Test.iFld1;
            } while (++i31 < 63);
            Test.dFld = i31;
        }
        for (i32 = 7; i32 < 160; i32++) {
            for (i34 = 1; i34 < 164; i34 += 3) {
                try {
                    iFld = (105 / i33);
                    Test.iFld1 = (iArr[i34 + 1][i34 + 1] % iArr[i32 + 1][i34 - 1]);
                    Test.iFld1 = (254 / i32);
                } catch (ArithmeticException a_e) {}
            }
            i33 <<= i31;
        }
        i33 ^= (int)Test.instanceCount;
        switch ((((Test.iFld1 >>> 1) % 5) * 5) + 60) {
        case 78:
            iFld -= -156;
            break;
        case 84:
        case 82:
            Test.fFld += Test.instanceCount;
            i36 = 1;
            while (++i36 < 162) {
                if (false) continue;
                i37 = 155;
                do {
                    for (f1 = 1; f1 < 1; ++f1) {
                        if (Test.bFld) continue;
                        Test.iFld1 = Test.byFld;
                        i33 += (int)f1;
                        Test.iFld1 += (int)(f1 + Test.fFld);
                        bArr[i37] = Test.bFld;
                    }
                    Test.iFld1 = (int)Test.instanceCount;
                    i33 *= (int)166L;
                    Test.instanceCount = i35;
                } while (--i37 > 0);
            }
            break;
        case 81:
            i35 = i38;
            break;
        case 83:
            Test.dFld += i32;
            break;
        default:
            i35 = iFld;
        }

        FuzzerUtils.out.println("s i31 i32 = " + s + "," + i31 + "," + i32);
        FuzzerUtils.out.println("i33 i34 i35 = " + i33 + "," + i34 + "," + i35);
        FuzzerUtils.out.println("i36 i37 f1 = " + i36 + "," + i37 + "," + Float.floatToIntBits(f1));
        FuzzerUtils.out.println("i38 fArr byArr = " + i38 + "," + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) +
            "," + FuzzerUtils.checkSum(byArr));
        FuzzerUtils.out.println("iArr bArr = " + FuzzerUtils.checkSum(iArr) + "," + FuzzerUtils.checkSum(bArr));

        FuzzerUtils.out.println("Test.instanceCount iFld Test.fFld = " + Test.instanceCount + "," + iFld + "," +
            Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.byFld Test.dFld Test.iFld1 = " + Test.byFld + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Test.iFld1);
        FuzzerUtils.out.println("Test.sFld Test.bFld Test.iArrFld = " + Test.sFld + "," + (Test.bFld ? 1 : 0) + "," +
            FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.sArrFld = " + FuzzerUtils.checkSum(Test.sArrFld));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
class UserDefinedExceptionTest extends RuntimeException {
    public int field;
}

//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test vMeth
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  lMeth ->  lMeth vMeth mainTest
//DEBUG  iMeth ->  iMeth lMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
