// Generated by Java* Fuzzer test generator (1.0.001). Mon Nov 22 02:13:25 2021
public class Test {

    public static final int N = 400;

    public static volatile long instanceCount=3029466638L;
    public static int iFld=2;
    public static short sFld=-4451;
    public static boolean bFld=false;
    public static double dArrFld[]=new double[N];

    static {
        FuzzerUtils.init(Test.dArrFld, 0.60220);
    }

    public static long vMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long lMeth_check_sum = 0;

    public static long lMeth() {

        int i4=60207, i5=-4715, i6=-11347, i7=-52049, i8=197, i9=12, iArr1[]=new int[N];
        float f=0.206F;

        FuzzerUtils.init(iArr1, 11);

        for (i4 = 251; i4 > 12; i4 -= 2) {
            Test.instanceCount = 10;
            for (i6 = 1; i6 < 13; ++i6) {
                i5 += i6;
                for (i8 = i6; i8 < 2; i8++) {
                    i5 = Test.iFld;
                    f = 2;
                    Test.iFld += (((i8 * i8) + Test.iFld) - f);
                    i9 += (((i8 * f) + i7) - Test.instanceCount);
                    iArr1[i6 - 1] = (int)Test.instanceCount;
                    i7 *= i7;
                    Test.iFld += i4;
                    i7 = (int)Test.instanceCount;
                    Test.instanceCount -= i9;
                    f += Test.instanceCount;
                }
            }
        }
        long meth_res = i4 + i5 + i6 + i7 + i8 + i9 + Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr1);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public static int iMeth(int i3) {

        int i10=-17, i11=-9, i12=-38212, i13=-43344, i14=-242, iArr2[]=new int[N];
        double d1=0.122452;
        float f1=2.41F;
        long lArr1[]=new long[N];

        FuzzerUtils.init(lArr1, 223L);
        FuzzerUtils.init(iArr2, -10);

        i3 += (--Test.sFld);
        lMeth();
        for (i10 = 7; i10 < 327; ++i10) {
            Test.sFld += (short)i11;
            switch ((i10 % 8) + 126) {
            case 126:
                i11 >>>= -5;
                break;
            case 127:
                d1 += i3;
                lArr1[i10 - 1] >>= i12;
                break;
            case 128:
                i3 += i10;
                switch (((i10 >>> 1) % 6) + 31) {
                case 31:
                    Test.iFld >>= (int)Test.instanceCount;
                    for (i13 = 1; i13 < 5; i13++) {
                        Test.instanceCount += -60858;
                        d1 += f1;
                        Test.iFld = i13;
                    }
                case 32:
                    i12 += i10;
                case 33:
                    iArr2[i10 + 1] -= i11;
                    break;
                case 34:
                case 35:
                    Test.instanceCount += Test.instanceCount;
                    break;
                case 36:
                    Test.iFld = i11;
                    break;
                default:
                    Test.sFld -= (short)-15795;
                }
                break;
            case 129:
                i14 = (int)-2113075123L;
                break;
            case 130:
                Test.iFld = i10;
                break;
            case 131:
                lArr1[i10 - 1] <<= Test.iFld;
                break;
            case 132:
            case 133:
                d1 /= (i14 | 1);
                break;
            default:
                iArr2[i10] *= -170;
            }
        }
        long meth_res = i3 + i10 + i11 + Double.doubleToLongBits(d1) + i12 + i13 + i14 + Float.floatToIntBits(f1) +
            FuzzerUtils.checkSum(lArr1) + FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(long l, int i, double d) {

        int i1=24098, i2=60432, i15=63022, i16=-35087, i17=-25765, i18=14, iArr[]=new int[N];
        float f2=0.904F;

        FuzzerUtils.init(iArr, 879);

        Test.iFld = Math.abs(iArr[(Test.iFld >>> 1) % N]--);
        for (i1 = 2; i1 < 257; i1++) {
            Test.iFld = iMeth(i);
            i15 = 1;
            while (++i15 < 6) {
                for (i16 = 1; i16 < 1; i16++) {
                    i = (int)f2;
                    i17 *= i16;
                    i17 -= (int)d;
                    switch ((i1 % 7) + 48) {
                    case 48:
                        Test.sFld >>= (short)i17;
                        i18 += i17;
                        break;
                    case 49:
                        i2 -= i2;
                        f2 += i15;
                        i18 += i16;
                        f2 -= -59446;
                        break;
                    case 50:
                        l = 88679766L;
                        break;
                    case 51:
                        Test.instanceCount *= Test.instanceCount;
                        break;
                    case 52:
                        Test.sFld += (short)-45715;
                        break;
                    case 53:
                        Test.iFld = 174;
                        break;
                    case 54:
                        i18 = (int)d;
                        break;
                    }
                }
            }
        }
        vMeth_check_sum += l + i + Double.doubleToLongBits(d) + i1 + i2 + i15 + i16 + i17 + Float.floatToIntBits(f2) +
            i18 + FuzzerUtils.checkSum(iArr);
    }

    public void mainTest(String[] strArr1) {

        double d2=108.75616;
        byte by=16, byArr[]=new byte[N];
        long l1=3918144513L, l2=2344557096994144497L, lArr[]=new long[N];
        int i19=-253, i20=43626, i21=217, i22=36106, iArr3[]=new int[N];
        float f3=-114.795F, f4=-89.728F;

        FuzzerUtils.init(lArr, 4646121559916227144L);
        FuzzerUtils.init(iArr3, -22643);
        FuzzerUtils.init(byArr, (byte)59);

        Test.iFld = (int)lArr[(-10 >>> 1) % N];
        if (Test.bFld) {
            vMeth(-154L, Test.iFld, d2);
        }
        Test.iFld = Test.iFld;
        iArr3 = iArr3;
        Test.instanceCount = by;
        Test.iFld = Test.iFld;
        iArr3[(Test.iFld >>> 1) % N] = (int)Test.instanceCount;
        l1 = (long)d2;
        Test.bFld = Test.bFld;
        Test.dArrFld[(-3726 >>> 1) % N] -= -20018;
        l1 -= i19;
        for (i20 = 3; i20 < 174; i20 += 3) {
            Test.iFld = Test.iFld;
            Test.instanceCount ^= l1;
            Test.iFld = Test.iFld;
            f3 = 1;
            while (++f3 < 194) {
                l1 = Test.instanceCount;
                byArr[(int)(f3)] += (byte)i20;
                i19 ^= (int)l1;
                if (Test.bFld) continue;
                d2 += 35526;
                l1 += (long)(f3 + l1);
                by /= (byte)((long)(f3) | 1);
            }
            i19 *= Test.iFld;
            for (l2 = 1; l2 < i20; ++l2) {
                Test.iFld -= (int)f3;
                f4 -= -38143;
                iArr3[(int)(l2)] = i20;
                f4 += (l2 * l2);
            }
        }

        FuzzerUtils.out.println("d2 by l1 = " + Double.doubleToLongBits(d2) + "," + by + "," + l1);
        FuzzerUtils.out.println("i19 i20 i21 = " + i19 + "," + i20 + "," + i21);
        FuzzerUtils.out.println("f3 l2 i22 = " + Float.floatToIntBits(f3) + "," + l2 + "," + i22);
        FuzzerUtils.out.println("f4 lArr iArr3 = " + Float.floatToIntBits(f4) + "," + FuzzerUtils.checkSum(lArr) + ","
            + FuzzerUtils.checkSum(iArr3));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount Test.iFld Test.sFld = " + Test.instanceCount + "," + Test.iFld +
            "," + Test.sFld);
        FuzzerUtils.out.println("Test.bFld Test.dArrFld = " + (Test.bFld ? 1 : 0) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)));

        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth mainTest
//DEBUG  lMeth ->  lMeth iMeth vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
