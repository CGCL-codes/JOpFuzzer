// Generated by Java* Fuzzer test generator (1.0.001). Mon Jan 11 14:14:34 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=20658L;
    public static long lFld=-29826L;
    public static float fFld=69.17F;
    public static int iFld=-63895;
    public boolean bFld=true;
    public byte byFld=-31;
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.fArrFld, 17.221F);
    }

    public static long lMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;

    public static void vMeth1(long l1) {

        int i4=-12, i5=173, i6=0, i7=-14, iArr1[]=new int[N];
        double d1=0.77920;
        short s=-7586;

        FuzzerUtils.init(iArr1, -25849);

        i4 -= (int)l1;
        iArr1[(-21111 >>> 1) % N] -= i4;
        l1 >>>= i4;
        d1 = i4;
        i4 += (int)Test.fFld;
        i5 = 1;
        do {
            iArr1[i5 + 1] += i4;
            i4 = (int)65.81305;
            Test.fFld -= 38435;
            for (i6 = 1; i6 < 7; ++i6) {
                i7 += (int)Test.fFld;
                i7 += (((i6 * i5) + Test.iFld) - i5);
                Test.iFld = (int)l1;
                Test.iFld += (((i6 * i6) + i6) - s);
            }
            Test.instanceCount = i5;
        } while (++i5 < 225);
        vMeth1_check_sum += l1 + i4 + Double.doubleToLongBits(d1) + i5 + i6 + i7 + s + FuzzerUtils.checkSum(iArr1);
    }

    public static void vMeth(float f) {

        int iArr2[]=new int[N];

        FuzzerUtils.init(iArr2, -54468);

        f = -247;
        vMeth1(Test.lFld);
        iArr2[(Test.iFld >>> 1) % N] = Test.iFld;
        vMeth_check_sum += Float.floatToIntBits(f) + FuzzerUtils.checkSum(iArr2);
    }

    public static long lMeth(int i2, int i3, long l) {

        int i8=202, i9=-26438, i10=-62311, i11=4623, iArr3[]=new int[N];
        double d2=2.74886;
        byte by=91;
        short s1=5453;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr3, 29650);
        FuzzerUtils.init(lArr, -6L);

        vMeth(Test.fFld);
        Test.fFld -= Test.lFld;
        iArr3[(i2 >>> 1) % N] = Test.iFld;
        for (i8 = 11; i8 < 364; ++i8) {
            d2 = 1;
            do {
                lArr[(int)(d2)][(int)(d2)] *= Test.iFld;
                lArr[(int)(d2 + 1)][(int)(d2)] *= -35454;
                for (i10 = 1; i10 < 1; i10++) {
                    by += (byte)(i10 * i10);
                    i3 -= by;
                    s1 += (short)i3;
                    i11 >>= Test.iFld;
                    i9 >>= Test.iFld;
                    i3 = (int)Test.lFld;
                }
                i11 -= i3;
            } while (++d2 < 5);
        }
        long meth_res = i2 + i3 + l + i8 + i9 + Double.doubleToLongBits(d2) + i10 + i11 + by + s1 +
            FuzzerUtils.checkSum(iArr3) + FuzzerUtils.checkSum(lArr);
        lMeth_check_sum += meth_res;
        return (long)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=-46, i1=4, i12=-1, i13=191, i14=34, i15=0, i16=-249, i17=-20840, i18=-170, i19=-13, iArr[]=new int[N];
        double d=-82.31890;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr, 10);
        FuzzerUtils.init(lArr1, -10L);

        Test.lFld *= ((-(i - i)) * (--iArr[(46544 >>> 1) % N]));
        for (d = 5; d < 388; d++) {
            Test.instanceCount += (long)((lMeth(Test.iFld, Test.iFld, -8956440418347472393L) * Test.lFld) - Test.fFld);
            for (i12 = 3; i12 < 66; ++i12) {
                Test.lFld += (long)Test.fFld;
                for (i14 = 1; i14 < 2; ++i14) {
                    i13 -= (int)Test.lFld;
                    if (bFld) {
                        Test.iFld >>= (int)Test.lFld;
                    }
                    iArr = FuzzerUtils.int1array(N, (int)9);
                    i15 = i1;
                    Test.iFld += i14;
                    Test.fArrFld[i14] = Test.instanceCount;
                }
                Test.iFld += (i12 * i12);
                for (i16 = 1; i16 < 2; i16++) {
                    iArr[i16 + 1] -= (int)19.33987;
                    Test.fFld -= (float)d;
                    Test.fFld *= i16;
                    iArr[i12 + 1] -= (int)-2L;
                    i *= (int)Test.lFld;
                    i15 = (int)Test.instanceCount;
                }
                Test.instanceCount += -32487L;
                Test.instanceCount *= (long)d;
                i13 >>= (int)Test.instanceCount;
                i13 += (-10 + (i12 * i12));
            }
        }
        for (i18 = 306; i18 > 12; i18--) {
            iArr[i18] = byFld;
            i19 = i1;
            i1 >>>= i17;
            if (bFld) break;
        }

        FuzzerUtils.out.println("i d i1 = " + i + "," + Double.doubleToLongBits(d) + "," + i1);
        FuzzerUtils.out.println("i12 i13 i14 = " + i12 + "," + i13 + "," + i14);
        FuzzerUtils.out.println("i15 i16 i17 = " + i15 + "," + i16 + "," + i17);
        FuzzerUtils.out.println("i18 i19 iArr = " + i18 + "," + i19 + "," + FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("lArr1 = " + FuzzerUtils.checkSum(lArr1));

        FuzzerUtils.out.println("Test.instanceCount Test.lFld Test.fFld = " + Test.instanceCount + "," + Test.lFld +
            "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("Test.iFld bFld byFld = " + Test.iFld + "," + (bFld ? 1 : 0) + "," + byFld);
        FuzzerUtils.out.println("Test.fArrFld = " + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("lMeth_check_sum: " + lMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  lMeth ->  lMeth mainTest
//DEBUG  vMeth ->  vMeth lMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth lMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
