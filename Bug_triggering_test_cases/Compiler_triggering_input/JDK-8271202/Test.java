// Generated by Java* Fuzzer test generator (1.0.001). Wed Jul 21 12:35:25 2021
public class Test {

    public static final int N = 400;

    public static long instanceCount=521524793833893623L;
    public float fFld=76.143F;
    public static int iFld=9;
    public static double dFld=-90.96034;
    public int iFld1=-13;
    public static int iArrFld[]=new int[N];
    public static long lArrFld[]=new long[N];
    public static double dArrFld[]=new double[N];
    public static float fArrFld[]=new float[N];

    static {
        FuzzerUtils.init(Test.iArrFld, -51949);
        FuzzerUtils.init(Test.lArrFld, -13L);
        FuzzerUtils.init(Test.dArrFld, 121.95565);
        FuzzerUtils.init(Test.fArrFld, 0.502F);
    }

    public static long vSmallMeth_check_sum = 0;
    public static long iMeth_check_sum = 0;
    public static long dMeth_check_sum = 0;
    public static long bMeth_check_sum = 0;

    public static void vSmallMeth() {

        int i1=30000;

        i1 = (int)(Test.instanceCount--);
        vSmallMeth_check_sum += i1;
    }

    public static boolean bMeth(long l1) {

        byte by1=-71;
        long l2=52701L;
        int i8=43217, i9=-7, i10=164, i11=53744, i12=182, i13=99;
        boolean b1=true;
        float f1=2.211F, fArr[]=new float[N];

        FuzzerUtils.init(fArr, -99.978F);

        vSmallMeth();
        by1 -= (byte)l1;
        for (l2 = 135; l2 > 5; l2 -= 2) {
            b1 = b1;
            for (i9 = 1; i9 < 24; i9++) {
                i8 *= (int)f1;
            }
            l1 += (((l2 * Test.instanceCount) + l2) - by1);
            fArr = fArr;
            for (i11 = (int)(l2); i11 < 24; i11++) {
                double d1=77.100338;
                i10 += (int)f1;
                Test.iArrFld = Test.iArrFld;
                i8 = i8;
                i8 -= Test.iFld;
                by1 += (byte)(i11 - i12);
                Test.instanceCount = i8;
                switch ((int)((l2 % 5) + 70)) {
                case 70:
                    if (b1) continue;
                    l1 = by1;
                    b1 = b1;
                    Test.iArrFld[(int)(l2 + 1)] = i12;
                    break;
                case 71:
                    if (b1) continue;
                case 72:
                    b1 = b1;
                case 73:
                    i10 += (i11 * f1);
                case 74:
                    d1 = by1;
                    break;
                default:
                    Test.lArrFld[i11] *= i13;
                }
            }
        }
        long meth_res = l1 + by1 + l2 + i8 + (b1 ? 1 : 0) + i9 + i10 + Float.floatToIntBits(f1) + i11 + i12 + i13 +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr));
        bMeth_check_sum += meth_res;
        return meth_res % 2 > 0;
    }

    public static double dMeth(float f, boolean b, double d) {

        int i6=184, i7=-143, i14=5, i15=-161, i16=57005, i17=-11, i18=209, i19=0;
        byte by2=-107, byArr1[]=new byte[N];
        long l3=2092291573L;

        FuzzerUtils.init(byArr1, (byte)-32);

        i6 = 1;
        while (++i6 < 220) {
            try {
                Test.iFld = (Test.iArrFld[i6 + 1] / -50362);
                Test.iFld = (i6 % Test.iFld);
                Test.iArrFld[(141 >>> 1) % N] = (216 / i6);
            } catch (ArithmeticException a_e) {}
            i7 += (((i6 * i7) + i7) - Test.iFld);
            if (b || ((b = (true != (i7 >= f))) == bMeth(59437L))) {
                vSmallMeth();
            } else {
            }
            for (i14 = 1; i14 < 7; ++i14) {
                by2 = (byte)Test.instanceCount;
                switch ((i6 % 10) + 120) {
                case 120:
                    d += 0.106210;
                    for (i16 = 1; i16 < 2; i16++) {
                        f = i14;
                    }
                    for (i18 = 1; i18 < 2; ++i18) {
                        byArr1[i18] -= (byte)-8995L;
                        Test.instanceCount -= i15;
                        switch ((((Test.iFld >>> 1) % 6) * 5) + 42) {
                        case 57:
                        case 44:
                            b = b;
                            break;
                        case 50:
                            i17 += (i18 * i18);
                            i17 = i17;
                            if (i18 != 0) {
                            }
                            Test.iArrFld[i18 + 1] += 10;
                        case 61:
                            b = b;
                            break;
                        case 46:
                            i19 += Test.iFld;
                            break;
                        case 47:
                            Test.instanceCount = -217;
                            break;
                        }
                    }
                case 121:
                    Test.instanceCount *= Test.instanceCount;
                    break;
                case 122:
                    Test.instanceCount += (((i14 * i19) + i17) - l3);
                case 123:
                    Test.iArrFld[i6 + 1] += (int)Test.instanceCount;
                    break;
                case 124:
                    l3 *= i19;
                case 125:
                    i7 = (int)l3;
                    break;
                case 126:
                    i15 += (i14 ^ l3);
                    break;
                case 127:
                    l3 >>= 171L;
                    break;
                case 128:
                    l3 += i14;
                    break;
                case 129:
                    l3 += (i14 + Test.iFld);
                    break;
                default:
                    Test.instanceCount = 37L;
                }
            }
        }
        long meth_res = Float.floatToIntBits(f) + (b ? 1 : 0) + Double.doubleToLongBits(d) + i6 + i7 + i14 + i15 + by2
            + i16 + i17 + i18 + i19 + l3 + FuzzerUtils.checkSum(byArr1);
        dMeth_check_sum += meth_res;
        return (double)meth_res;
    }

    public static int iMeth(int i4, int i5) {

        float f2=101.354F, fArr1[]=new float[N];
        boolean b2=false;
        int i20=-28, i21=-126, i22=62479, i23=-5294, i24=-10, i25=-238;
        long l4=4045722201179772642L, l5=-3752414189L;
        byte by3=-33;

        FuzzerUtils.init(fArr1, 2.579F);

        Test.instanceCount = i5;
        Test.instanceCount >>= (++i5);
        i5 += (int)((i5 + -162) - ((i4 + -1.53F) * dMeth(f2, b2, Test.dFld)));
        for (i20 = 4; i20 < 366; ++i20) {
            if (b2) {
                Test.instanceCount += (i20 * i20);
                for (l4 = 1; l4 < 5; l4++) {
                    Test.dArrFld[i20] = i22;
                    i22 = i5;
                    Test.instanceCount += (l4 - l4);
                    fArr1[(int)(l4 - 1)] -= i5;
                    Test.lArrFld[(int)(l4 - 1)] >>= i5;
                }
                for (l5 = 1; l5 < 5; ++l5) {
                    i4 += (int)(((l5 * by3) + l4) - Test.iFld);
                    i22 += (int)(l5 | l4);
                    for (i24 = 1; i24 < 2; ++i24) {
                        Test.instanceCount -= (long)Test.dFld;
                        i4 += (((i24 * l4) + f2) - l4);
                        Test.dFld = i5;
                        Test.lArrFld = Test.lArrFld;
                    }
                }
            }
        }
        long meth_res = i4 + i5 + Float.floatToIntBits(f2) + (b2 ? 1 : 0) + i20 + i21 + l4 + i22 + l5 + i23 + by3 + i24
            + i25 + Double.doubleToLongBits(FuzzerUtils.checkSum(fArr1));
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        byte by=108, byArr[][]=new byte[N][N];
        long l=10L, l6=10L, lArr[]=new long[N];
        int i=-2711, i2=-3, i3=-6, i26=-140, i27=16166, i28=-7, i29=226, i30=-42219, iArr[]=new int[N];
        short s=-7803;
        boolean b3=true;

        FuzzerUtils.init(lArr, -1799002057370633191L);
        FuzzerUtils.init(iArr, 3);
        FuzzerUtils.init(byArr, (byte)90);

        Test.instanceCount <<= (--by);
        for (l = 21; l < 353; ++l) {
            Test.instanceCount += (l + by);
            fFld %= (((long)(((fFld * i) - (i--)) + (-(i--)))) | 1);
        }
        for (int smallinvoc=0; smallinvoc<139; smallinvoc++) vSmallMeth();
        i += (int)(-((Test.instanceCount - i) - i));
        for (i2 = 13; 234 > i2; i2++) {
            lArr[i2 - 1] = Integer.reverseBytes(Integer.reverseBytes(i - i));
            iArr[i2 + 1] = Short.reverseBytes(s);
            iArr[i2 - 1] = byArr[i2 + 1][i2];
            if (b3) {
                iArr[i2] = (int)((iMeth(i3, i3) * Test.instanceCount) - l);
                Test.iFld = (int)3217720957L;
                for (i26 = 2; i26 < 114; ++i26) {
                    for (l6 = 1; l6 < 2; l6 += 2) {
                        Test.instanceCount >>>= i;
                        Test.instanceCount = i26;
                        Test.fArrFld[i2] -= i3;
                        Test.iFld += (int)fFld;
                        Test.iFld += (120 + (l6 * l6));
                        i3 -= Test.iFld;
                        i27 -= (int)-45805L;
                        Test.instanceCount = i2;
                    }
                    i3 += (i26 * i26);
                    i28 *= (int)Test.dFld;
                    if (b3) {
                        for (i29 = 1; i29 < 2; ++i29) {
                            i += i29;
                            fFld = i29;
                            switch (((-54309 >>> 1) % 3) + 127) {
                            case 127:
                                switch (((i26 % 6) * 5) + 69) {
                                case 82:
                                    switch ((((i30 >>> 1) % 10) * 5) + 90) {
                                    case 138:
                                        Test.instanceCount -= i30;
                                        i28 += i29;
                                        Test.instanceCount += (i29 * s);
                                        i28 >>= (int)Test.instanceCount;
                                        i = i3;
                                        Test.instanceCount += i29;
                                        break;
                                    case 121:
                                        by += (byte)-92.12674;
                                        s = (short)i29;
                                    case 128:
                                        fFld *= i26;
                                        break;
                                    case 109:
                                        Test.lArrFld[i26 - 1] = l6;
                                        break;
                                    case 93:
                                        i30 += (i29 ^ Test.instanceCount);
                                        break;
                                    case 137:
                                        iArr[i29] = (int)l;
                                        break;
                                    case 113:
                                        fFld = l;
                                        break;
                                    case 132:
                                        Test.instanceCount += (i29 - i29);
                                        break;
                                    case 100:
                                        Test.instanceCount = -536143374751341768L;
                                    case 126:
                                        Test.iFld += (int)Test.instanceCount;
                                    default:
                                        Test.dFld *= 7751L;
                                    }
                                    break;
                                case 91:
                                case 72:
                                    if (b3) break;
                                    break;
                                case 75:
                                    Test.dFld = i3;
                                    break;
                                case 84:
                                    i3 += (int)fFld;
                                    break;
                                case 79:
                                    i3 += (i29 * i27);
                                    break;
                                }
                            case 128:
                                s = (short)42283;
                                break;
                            case 129:
                            }
                        }
                    } else {
                        try {
                            iFld1 = (Test.iArrFld[i2 + 1] / 1863632129);
                            Test.iFld = (Test.iArrFld[i26] % i);
                            iArr[i26] = (-320465998 % i30);
                        } catch (ArithmeticException a_e) {}
                    }
                }
            }
        }

        FuzzerUtils.out.println("by l i = " + by + "," + l + "," + i);
        FuzzerUtils.out.println("i2 i3 s = " + i2 + "," + i3 + "," + s);
        FuzzerUtils.out.println("i26 i27 l6 = " + i26 + "," + i27 + "," + l6);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("b3 lArr iArr = " + (b3 ? 1 : 0) + "," + FuzzerUtils.checkSum(lArr) + "," +
            FuzzerUtils.checkSum(iArr));
        FuzzerUtils.out.println("byArr = " + FuzzerUtils.checkSum(byArr));

        FuzzerUtils.out.println("Test.instanceCount fFld Test.iFld = " + Test.instanceCount + "," +
            Float.floatToIntBits(fFld) + "," + Test.iFld);
        FuzzerUtils.out.println("Test.dFld iFld1 Test.iArrFld = " + Double.doubleToLongBits(Test.dFld) + "," + iFld1 +
            "," + FuzzerUtils.checkSum(Test.iArrFld));
        FuzzerUtils.out.println("Test.lArrFld Test.dArrFld Test.fArrFld = " + FuzzerUtils.checkSum(Test.lArrFld) + ","
            + Double.doubleToLongBits(FuzzerUtils.checkSum(Test.dArrFld)) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(Test.fArrFld)));

        FuzzerUtils.out.println("vSmallMeth_check_sum: " + vSmallMeth_check_sum);
        FuzzerUtils.out.println("bMeth_check_sum: " + bMeth_check_sum);
        FuzzerUtils.out.println("dMeth_check_sum: " + dMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vSmallMeth ->  vSmallMeth mainTest Test dMeth iMeth bMeth
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  dMeth ->  dMeth iMeth mainTest
//DEBUG  bMeth ->  bMeth dMeth iMeth mainTest
//DEBUG  Depth = 4
//DEBUG  Classes = 1
//DEBUG  static objects = {}
