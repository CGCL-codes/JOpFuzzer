// Generated by Java* Fuzzer test generator (1.0.001). Mon Jan  3 00:06:41 2022
public class Test {

    public static final int N = 400;

    public static long instanceCount=-3229631919L;
    public static double dFld=0.98132;
    public static float fFld=77.170F;
    public int iFld=-7;
    public static boolean bFld=false;

    public static long vMeth_check_sum = 0;
    public static long vMeth1_check_sum = 0;
    public static long iMeth_check_sum = 0;

    public static int iMeth() {

        int i9=121, i10=10, i11=-100, i12=50760, iArr1[]=new int[N], iArr2[][]=new int[N][N];
        byte by=-1;
        long lArr[][]=new long[N][N];

        FuzzerUtils.init(iArr1, 1743);
        FuzzerUtils.init(lArr, 8786417274066884865L);
        FuzzerUtils.init(iArr2, 71);

        for (i9 = 5; i9 < 236; ++i9) {
            i11 = 1;
            do {
                iArr1[i11 + 1] = (int)Test.fFld;
                lArr[i11 + 1][i9] -= Test.instanceCount;
                switch ((i11 % 8) + 3) {
                case 3:
                    iArr2 = FuzzerUtils.int2array(N, (int)198);
                    i10 = (int)74L;
                    i10 += i11;
                    i10 = (int)Test.dFld;
                case 4:
                    Test.fFld += i11;
                    i10 *= i11;
                    i10 = -7;
                    break;
                case 5:
                    i12 = 1;
                    while (++i12 < 1) {
                        i10 += i10;
                        i10 += (i12 * i12);
                    }
                    break;
                case 6:
                    Test.dFld += i10;
                    break;
                case 7:
                    i10 -= by;
                    break;
                case 8:
                    Test.dFld = i10;
                    break;
                case 9:
                    Test.instanceCount += -42192;
                    break;
                case 10:
                    i10 += i11;
                default:
                    i10 -= i10;
                }
            } while (++i11 < 7);
        }
        long meth_res = i9 + i10 + i11 + i12 + by + FuzzerUtils.checkSum(iArr1) + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr2);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth1(int i5, int i6) {

        int i7=-4, i8=-31, i13=5, i14=-21982, i15=-14, iArr[]=new int[N];
        long l1=-206L, lArr1[]=new long[N];
        byte by1=86;
        short sArr[][]=new short[N][N];

        FuzzerUtils.init(iArr, -48336);
        FuzzerUtils.init(sArr, (short)18986);
        FuzzerUtils.init(lArr1, 218L);

        Test.instanceCount >>= -64243;
        for (i7 = 269; i7 > 9; i7 -= 2) {
            i8 += (int)(++Test.dFld);
            iArr[i7] += iMeth();
            switch (((i7 % 3) * 5) + 76) {
            case 84:
                Test.fFld -= i8;
                for (l1 = 1; l1 < 12; l1++) {
                    if (false) continue;
                    by1 *= (byte)i7;
                    sArr[i7 + 1][(int)(l1 - 1)] += (short)Test.fFld;
                    for (i14 = 1; i14 < 2; i14++) {
                        Test.fFld = by1;
                        Test.fFld += i13;
                        Test.instanceCount += (((i14 * i7) + Test.instanceCount) - by1);
                        i6 -= i8;
                    }
                }
                break;
            case 82:
                i6 -= (int)Test.instanceCount;
                break;
            case 90:
                lArr1[i7 - 1] <<= i6;
                break;
            }
        }
        vMeth1_check_sum += i5 + i6 + i7 + i8 + l1 + i13 + by1 + i14 + i15 + FuzzerUtils.checkSum(iArr) +
            FuzzerUtils.checkSum(sArr) + FuzzerUtils.checkSum(lArr1);
    }

    public void vMeth(int i1, long l, int i2) {

        int i3=-4, i4=2, i16=-13, i17=247, i18=-14, i19=-108;
        byte by2=113;
        long lArr2[]=new long[N];

        FuzzerUtils.init(lArr2, -57199L);

        for (i3 = 1; i3 < 206; ++i3) {
            vMeth1(0, i1);
            for (i16 = i3; 8 > i16; i16++) {
                i4 += i2;
                if (i1 != 0) {
                    vMeth_check_sum += i1 + l + i2 + i3 + i4 + i16 + i17 + i18 + i19 + by2 +
                        FuzzerUtils.checkSum(lArr2);
                    return;
                }
                for (i18 = 1; i18 < 1; ++i18) {
                    by2 += (byte)Test.fFld;
                    i17 >>= 8272;
                    i19 = i18;
                    i19 += i18;
                    Test.instanceCount += i1;
                    i4 >>= 66;
                }
                lArr2[i3 - 1] -= 58639;
                i2 <<= -175;
                i1 += (i16 ^ i16);
            }
        }
        vMeth_check_sum += i1 + l + i2 + i3 + i4 + i16 + i17 + i18 + i19 + by2 + FuzzerUtils.checkSum(lArr2);
    }

    public void mainTest(String[] strArr1) {

        float f=0.814F, fArr[]=new float[N];
        int i=-5, i20=18981, i21=8, i22=5, i23=9399, i24=-197, i25=175, i26=8, i27=47305, i28=13, i29=-7, i30=-66,
            iArr3[]=new int[N];
        double d=-75.80325;
        byte by3=-51;
        boolean bArr[]=new boolean[N];
        long lArr3[]=new long[N];

        FuzzerUtils.init(bArr, false);
        FuzzerUtils.init(fArr, 0.821F);
        FuzzerUtils.init(lArr3, -5469969652495774612L);
        FuzzerUtils.init(iArr3, 5);

        f = i;
        vMeth(iFld, Test.instanceCount, iFld);
        for (i20 = 18; i20 < 361; i20++) {
            for (i22 = 4; 73 > i22; i22++) {
                if (Test.bFld) break;
                iFld = 58667;
                Test.instanceCount += (((i22 * iFld) + i23) - Test.fFld);
                i23 *= i23;
            }
            Test.instanceCount = i;
            bArr[i20] = Test.bFld;
            if (Test.bFld) continue;
            i23 = i22;
            i = -52613;
            for (d = i20; d < 73; d++) {
                fArr[(int)(d - 1)] = -5;
                for (i25 = 1; i25 < 1; i25++) {
                    i += i25;
                    lArr3[i25 - 1] *= (long)Test.fFld;
                    Test.instanceCount -= (long)107.593F;
                    Test.instanceCount += i24;
                    if (Test.bFld) break;
                    iArr3[i20] = i26;
                    iArr3[i25] >>= i;
                    fArr[i25] -= i21;
                    i21 -= by3;
                }
                f += (float)d;
            }
        }
        for (i27 = 15; i27 < 384; i27++) {
            for (i29 = 3; i29 < 68; i29++) {
                i30 = 5512;
                iArr3[i27 - 1] ^= (int)Test.instanceCount;
            }
        }

        FuzzerUtils.out.println("f i i20 = " + Float.floatToIntBits(f) + "," + i + "," + i20);
        FuzzerUtils.out.println("i21 i22 i23 = " + i21 + "," + i22 + "," + i23);
        FuzzerUtils.out.println("d i24 i25 = " + Double.doubleToLongBits(d) + "," + i24 + "," + i25);
        FuzzerUtils.out.println("i26 by3 i27 = " + i26 + "," + by3 + "," + i27);
        FuzzerUtils.out.println("i28 i29 i30 = " + i28 + "," + i29 + "," + i30);
        FuzzerUtils.out.println("bArr fArr lArr3 = " + FuzzerUtils.checkSum(bArr) + "," +
            Double.doubleToLongBits(FuzzerUtils.checkSum(fArr)) + "," + FuzzerUtils.checkSum(lArr3));
        FuzzerUtils.out.println("iArr3 = " + FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.fFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + Float.floatToIntBits(Test.fFld));
        FuzzerUtils.out.println("iFld Test.bFld = " + iFld + "," + (Test.bFld ? 1 : 0));

        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
        FuzzerUtils.out.println("vMeth1_check_sum: " + vMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  vMeth ->  vMeth mainTest
//DEBUG  vMeth1 ->  vMeth1 vMeth mainTest
//DEBUG  iMeth ->  iMeth vMeth1 vMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
