// Generated by Java* Fuzzer test generator (1.0.001). Mon Mar  9 06:06:18 2020
public class Test {

    public static final int N = 400;

    public static long instanceCount=1090186992L;
    public static double dFld=-1.2387;
    public static volatile boolean bFld=true;
    public static volatile float fFld=73.520F;
    public static volatile int iFld=-4;

    public static long iMeth_check_sum = 0;
    public static long vMeth_check_sum = 0;
    public static long iMeth1_check_sum = 0;

    public static int iMeth1(int i3) {

        int i4=-94, i5=-97, i6=0, i7=-22316;
        float f1=-102.660F;
        double d=54.30639, dArr[]=new double[N];
        byte byArr[]=new byte[N];

        FuzzerUtils.init(byArr, (byte)0);
        FuzzerUtils.init(dArr, 1.72827);

        i3 >>= -51825;
        i4 = 1;
        do {
            i3 -= i3;
            f1 += -234L;
            i3 += i3;
            i5 = 1;
            while (++i5 < 8) {
                byArr[i4] -= (byte)i4;
                for (i6 = 1; i6 < 1; ++i6) {
                    i7 >>= (int)Test.instanceCount;
                    Test.instanceCount -= i7;
                    Test.instanceCount -= (long)f1;
                    switch ((i4 % 3) + 122) {
                    case 122:
                        i3 += (int)Test.instanceCount;
                        break;
                    case 123:
                        i3 += -19;
                        dArr = dArr;
                    case 124:
                        i3 *= (int)d;
                        break;
                    }
                }
            }
        } while (++i4 < 190);
        long meth_res = i3 + i4 + Float.floatToIntBits(f1) + i5 + i6 + i7 + Double.doubleToLongBits(d) +
            FuzzerUtils.checkSum(byArr) + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr));
        iMeth1_check_sum += meth_res;
        return (int)meth_res;
    }

    public static void vMeth(int i2) {

        int i8=34976, i9=251, i10=-94, i11=3, i12=-3, i13=30, iArr[]=new int[N], iArr1[]=new int[N];
        short s=28967;
        long lArr[][]=new long[N][N];
        double dArr1[]=new double[N];

        FuzzerUtils.init(lArr, 188L);
        FuzzerUtils.init(iArr, 131);
        FuzzerUtils.init(iArr1, -10);
        FuzzerUtils.init(dArr1, 20.22881);

        iMeth1(28738);
        for (i8 = 3; i8 < 213; i8++) {
            switch (((i8 % 10) * 5) + 24) {
            case 56:
                for (i10 = i8; i10 < 8; i10++) {
                    i2 += (((i10 * i9) + i2) - i9);
                    lArr[i10 - 1][i8 - 1] = i10;
                    i9 <<= i9;
                    for (i12 = 1; i12 < 1; i12++) {
                        int i14=26;
                        i11 += i12;
                        iArr[i8] >>= i14;
                        Test.dFld *= Test.dFld;
                        if (Test.bFld) {
                            s += (short)(i12 * i12);
                            i11 += (((i12 * i14) + i11) - Test.instanceCount);
                            Test.instanceCount = -10;
                        }
                    }
                }
                break;
            case 66:
                if (i8 != 0) {
                    vMeth_check_sum += i2 + i8 + i9 + i10 + i11 + i12 + i13 + s + FuzzerUtils.checkSum(lArr) +
                        FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) +
                        Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
                    return;
                }
                break;
            case 48:
                iArr1[i8] -= (int)Test.instanceCount;
            case 50:
                i11 -= i2;
                break;
            case 74:
                Test.dFld += i13;
                break;
            case 43:
                i11 += (i8 | (long)Test.fFld);
                break;
            case 49:
                dArr1[i8 - 1] = i11;
                break;
            case 46:
                try {
                    i2 = (i12 % -19);
                    iArr[i8 + 1] = (i10 % i8);
                    iArr[i8 + 1] = (i11 / -1744674805);
                } catch (ArithmeticException a_e) {}
                break;
            case 72:
                Test.iFld /= (int)(i8 | 1);
                break;
            case 69:
                Test.instanceCount -= 12L;
                break;
            }
        }
        vMeth_check_sum += i2 + i8 + i9 + i10 + i11 + i12 + i13 + s + FuzzerUtils.checkSum(lArr) +
            FuzzerUtils.checkSum(iArr) + FuzzerUtils.checkSum(iArr1) +
            Double.doubleToLongBits(FuzzerUtils.checkSum(dArr1));
    }

    public static int iMeth() {

        float f=14.691F;
        int i1=141, i15=-35833, i16=-7, iArr2[]=new int[N];
        byte by=-39;
        long lArr1[]=new long[N];

        FuzzerUtils.init(iArr2, 202);
        FuzzerUtils.init(lArr1, 158L);

        for (f = 6; f < 134; ++f) {
            vMeth(i1);
            iArr2[(int)(f - 1)] = 25109;
            iArr2[(int)(f)] <<= Test.iFld;
            Test.instanceCount *= -12;
            try {
                Test.iFld = (1564496519 / i1);
                iArr2[(int)(f)] = (i1 / 771362012);
                iArr2[(int)(f - 1)] = (i1 / Test.iFld);
            } catch (ArithmeticException a_e) {}
            lArr1 = FuzzerUtils.long1array(N, (long)-6L);
            Test.iFld *= i1;
            for (i15 = 1; i15 < 12; ++i15) {
                by = (byte)i15;
                iArr2[i15 - 1] = i15;
                Test.iFld *= 5;
                Test.iFld |= i15;
                by >>>= (byte)i1;
                i16 -= 10;
            }
        }
        long meth_res = Float.floatToIntBits(f) + i1 + i15 + i16 + by + FuzzerUtils.checkSum(iArr2) +
            FuzzerUtils.checkSum(lArr1);
        iMeth_check_sum += meth_res;
        return (int)meth_res;
    }

    public void mainTest(String[] strArr1) {

        int i=185, i17=11987, i18=16870, i19=-28761, i20=231, i21=-4933, i22=5198, i23=108, i24=11, iArr3[]=new int[N];
        short s1=29436;
        long l=-1L, lArr2[]=new long[N];
        double dArr2[]=new double[N];

        FuzzerUtils.init(lArr2, -10L);
        FuzzerUtils.init(dArr2, 96.15919);
        FuzzerUtils.init(iArr3, -47067);

        i *= iMeth();
        i -= i;
        s1 = (short)Test.iFld;
        i -= Test.iFld;
        i17 = 1;
        do {
            Test.instanceCount ^= Test.iFld;
            Test.dFld *= Test.iFld;
            lArr2[i17 - 1] = Test.iFld;
            i &= Test.iFld;
            for (i18 = 105; i18 > 5; i18--) {
                switch (((i17 % 8) * 5) + 3) {
                case 38:
                    for (l = 1; 2 > l; l++) {
                        Test.instanceCount *= i20;
                    }
                    break;
                case 23:
                    for (i21 = 1; i21 < 2; ++i21) {
                        Test.iFld += i19;
                        Test.dFld -= i;
                        Test.bFld = Test.bFld;
                        switch (((i19 >>> 1) % 5) + 35) {
                        case 35:
                            i += (i21 * i21);
                            Test.fFld = i22;
                            Test.iFld = i17;
                            Test.instanceCount /= ((long)(Test.dFld) | 1);
                            break;
                        case 36:
                            i20 -= i;
                            i19 *= i21;
                            if (Test.bFld) continue;
                            break;
                        case 37:
                            i20 += (int)-2.93488;
                            switch (((i17 % 4) * 5) + 58) {
                            case 69:
                                Test.fFld = Test.iFld;
                            case 61:
                                i -= Test.iFld;
                                break;
                            case 63:
                                Test.instanceCount *= -14L;
                                break;
                            case 73:
                                i += (int)l;
                                break;
                            }
                        case 38:
                            i20 += (i21 * i21);
                            break;
                        case 39:
                            i22 += i21;
                            break;
                        default:
                            Test.instanceCount += Test.iFld;
                        }
                    }
                    break;
                case 15:
                    Test.instanceCount = i17;
                case 32:
                    Test.bFld = Test.bFld;
                    break;
                case 8:
                    Test.iFld += (((i18 * Test.fFld) + i23) - i22);
                    break;
                case 29:
                    dArr2[i18] = Test.dFld;
                    break;
                case 4:
                    lArr2[(i24 >>> 1) % N] = i22;
                    break;
                case 5:
                    try {
                        i24 = (i23 / i19);
                        i24 = (-127 % iArr3[i18 + 1]);
                        iArr3[i17 + 1] = (i21 % i);
                    } catch (ArithmeticException a_e) {}
                    break;
                default:
                    i20 += (int)4217269790019303892L;
                }
            }
        } while (++i17 < 240);

        FuzzerUtils.out.println("i s1 i17 = " + i + "," + s1 + "," + i17);
        FuzzerUtils.out.println("i18 i19 l = " + i18 + "," + i19 + "," + l);
        FuzzerUtils.out.println("i20 i21 i22 = " + i20 + "," + i21 + "," + i22);
        FuzzerUtils.out.println("i23 i24 lArr2 = " + i23 + "," + i24 + "," + FuzzerUtils.checkSum(lArr2));
        FuzzerUtils.out.println("dArr2 iArr3 = " + Double.doubleToLongBits(FuzzerUtils.checkSum(dArr2)) + "," +
            FuzzerUtils.checkSum(iArr3));

        FuzzerUtils.out.println("Test.instanceCount Test.dFld Test.bFld = " + Test.instanceCount + "," +
            Double.doubleToLongBits(Test.dFld) + "," + (Test.bFld ? 1 : 0));
        FuzzerUtils.out.println("Test.fFld Test.iFld = " + Float.floatToIntBits(Test.fFld) + "," + Test.iFld);

        FuzzerUtils.out.println("iMeth1_check_sum: " + iMeth1_check_sum);
        FuzzerUtils.out.println("vMeth_check_sum: " + vMeth_check_sum);
        FuzzerUtils.out.println("iMeth_check_sum: " + iMeth_check_sum);
    }
    public static void main(String[] strArr) {

        try {
            Test _instance = new Test();
            for (int i = 0; i < 10; i++ ) {
                _instance.mainTest(strArr);
            }
         } catch (Exception ex) {
            FuzzerUtils.out.println(ex.getClass().getCanonicalName());
         }
    }
}
///////////////////////////////////////////////////////////////////////
//DEBUG  Test ->  Test
//DEBUG  main ->  main
//DEBUG  mainTest ->  mainTest
//DEBUG  iMeth ->  iMeth mainTest
//DEBUG  vMeth ->  vMeth iMeth mainTest
//DEBUG  iMeth1 ->  iMeth1 vMeth iMeth mainTest
//DEBUG  Depth = 3
//DEBUG  Classes = 1
//DEBUG  static objects = {}
